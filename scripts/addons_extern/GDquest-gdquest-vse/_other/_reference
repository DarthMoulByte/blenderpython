# IMPORT MODULES

import bpy
import sys
import os

dir = os.path.dirname(bpy.data.filepath)
if not dir in sys.path:
    sys.path.append(dir )
    #print(sys.path)

import cityFunctions

# this next part forces a reload in case you edit the source after you first start the blender session
import importlib
importlib.reload(cityFunctions)

# this is optional and allows you to call the functions without specifying the package name
from cityFunctions import *




# Draw handler

# To leave in operator:

# self.mouse_path = []
# args = (self, context)
# self._handle = bpy.types.SpaceSequenceEditor.draw_handler_add(
#     draw_callback_px, args, 'WINDOW', 'POST_PIXEL')


# def draw_callback_px(self, context):
#     # print("mouse points", len(self.mouse_path))

#     region = context.region
#     active = context.scene.sequence_editor.active_strip
#     if active is None:
#         return

#     x = active.frame_final_start
#     y = active.channel
#     x, y = region.view2d.view_to_region(x, y)

#     font_id = 0  # XXX, need to find out how best to get this.
#     blf.position(font_id, x, y, 0)
#     blf.size(font_id, 20, 72)
#     # region_to_view gives the region coords.  x is frame, y is channel.
#     x, y = region.view2d.region_to_view(*self.mouse_path[-1])
#     blf.draw(font_id, "Hello Word %d %d" % (x, y))
#     context.scene.frame_set(x)





# Keymap that changes operator property!

# assert not bpy.context.user_preferences.inputs.use_emulate_nu mpad
#
# mesh_sel_keymap = {
# 'ONE': "True, False, False",
# 'TWO': "False, True, False",
# 'THREE': "False, False, True"
# }
#
# uv_sel_keymap = {
# 'ONE': "VERTEX",
# 'TWO': "EDGE",
# 'THREE': "FACE",
# 'FOUR': "ISLAND"
# }
#
# wm = bpy.context.window_manager
# km = wm.keyconfigs.default.keymaps['Mesh']
#
# for k, v in mesh_sel_keymap.items():
#     kmi = km.keymap_items.new('wm.context_set_value', k, 'PRESS')
#     kmi.properties.data_path = 'tool_settings.mesh_select_mode'
#     kmi.properties.value = v
#
# kmi = km.keymap_items.new('wm.context_toggle', 'FOUR', 'PRESS')
# kmi.properties.data_path = 'space_data.use_occlude_
#
# km = wm.keyconfigs.default.keymaps['UV Editor']
#
# for k, v in uv_sel_keymap.items():
#     kmi = km.keymap_items.new('wm.context_set_enum', k, 'PRESS')
#     kmi.properties.data_path = 'tool_settings.uv_select_mode'
#     kmi.properties.value = v






# Invoke method: allows to get keyboard events on top of execute (i.e. do different things if user CTRL clicks on a button instead of simply clicking)

# class MyOperator(bpy.types.Operator):
#     bl_idname = "object.my_operator"
#     bl_label = "My Operator"
#
#     def invoke(self,context,event):
#         if event.ctrl:
#             do something
#         else:
#             do something else
#         return{"FINISHED"}

# Useful ops and paths
# bpy.ops.anim.change_frame(frame=266)
# bpy.app.debug_wm = True

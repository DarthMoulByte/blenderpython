# Copyright 2016 Maxime Herpin, Jake Dube
#
# ##### BEGIN GPL LICENSE BLOCK ######
# This file is part of Modular Tree.
#
# Modular Tree is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Modular Tree is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Modular Tree.  If not, see <http://www.gnu.org/licenses/>.
# ##### END GPL LICENSE BLOCK #####

from mathutils import Vector, Matrix
from random import random, randint
from math import pi, radians, exp, sqrt

import bpy
import bmesh

from .pruning import *
from .clock import Clock

from .particle_configurator import create_system
from .material_tools import build_bark_material


class Module:
    """This is used to represent a branch

    Methods:
        __init__ - Initialises the variables
        __repr__ - How the Module is represented
    """

    def __init__(self, entree, sortie, verts, faces, uv, uv_height=0.0):
        """Initialises the variables

        Args:
            entree - (list of int) The indexes of the entry vertices
            sortie - (list of int) The indexes of the exit vertices
            verts - (list of vector) The vertices of the Module
            faces - (list of (int, int, int, int)) The faces of the Module
        """
        self.entree = entree
        self.sortie = sortie
        self.verts = verts
        self.faces = faces
        self.uv = uv
        self.uv_height = uv_height

    def __repr__(self):
        return 'entry vertices:{} , number of splits:{}'.format(len(self.entree), len(self.sortie))


end_cap = Module(
    # entree
    [0, 1, 2, 3, 4, 5, 6, 7],
    # sortie
    [],
    # verts
    [(0.0, 1.0, 0.02), (-0.71, 0.71, 0.02), (-1.0, -0.0, 0.04), (-0.71, -0.71, 0.04), (0.0, -1.0, 0.02),
     (0.71, -0.71, 0.02), (1.0, 0.0, 0.04), (0.71, 0.71, 0.04), (0.0, 0.98, 0.14), (-0.69, 0.69, 0.14),
     (-0.98, -0.0, 0.21), (-0.69, -0.69, 0.21), (0.0, -0.98, 0.14), (0.69, -0.69, 0.14), (0.98, 0.0, 0.21),
     (0.69, 0.69, 0.21), (0.0, 0.88, 0.26), (-0.62, 0.62, 0.26), (-0.88, -0.0, 0.33), (-0.62, -0.62, 0.33),
     (0.0, -0.88, 0.26), (0.62, -0.62, 0.26), (0.88, 0.0, 0.33), (0.62, 0.62, 0.33), (0.0, 0.74, 0.32),
     (-0.52, 0.52, 0.32), (-0.74, -0.0, 0.41), (-0.52, -0.52, 0.41), (0.0, -0.74, 0.32), (0.52, -0.52, 0.32),
     (0.74, 0.0, 0.41), (0.52, 0.52, 0.41), (0.0, 0.33, 0.59), (-0.23, 0.23, 0.59), (-0.26, 0.02, 0.67),
     (-0.16, -0.2, 0.67), (0.0, -0.33, 0.59), (0.23, -0.23, 0.59), (0.26, -0.02, 0.67), (0.16, 0.2, 0.67)],
    # faces
    [(7, 15, 14, 6), (5, 13, 12, 4), (3, 11, 10, 2), (0, 8, 15, 7), (6, 14, 13, 5), (4, 12, 11, 3), (2, 10, 9, 1),
     (15, 8, 16, 23), (13, 14, 22, 21), (11, 12, 20, 19), (9, 10, 18, 17), (14, 15, 23, 22), (12, 13, 21, 20),
     (10, 11, 19, 18), (8, 9, 17, 16), (18, 19, 27, 26), (16, 17, 25, 24), (23, 16, 24, 31), (21, 22, 30, 29),
     (19, 20, 28, 27), (17, 18, 26, 25), (22, 23, 31, 30), (20, 21, 29, 28), (30, 31, 39, 38), (28, 29, 37, 36),
     (26, 27, 35, 34), (24, 25, 33, 32), (31, 24, 32, 39), (29, 30, 38, 37), (27, 28, 36, 35), (35, 38, 39, 34),
     (39, 32, 33, 34), (35, 36, 37, 38), (1, 9, 8, 0), (25, 26, 34, 33)],
    [[(0.93, 0.2), (0.93, 0.19), (0.98, 0.14), (1.0, 0.15)], [(1.0, 0.06), (0.98, 0.07), (0.93, 0.01), (0.94, 0.0)],
     [(0.85, 0.0), (0.86, 0.02), (0.81, 0.07), (0.79, 0.06)], [(0.85, 0.2), (0.86, 0.19), (0.93, 0.19), (0.93, 0.2)],
     [(1.0, 0.15), (0.98, 0.14), (0.98, 0.07), (1.0, 0.06)], [(0.94, 0.0), (0.93, 0.01), (0.86, 0.02), (0.85, 0.0)],
     [(0.79, 0.06), (0.81, 0.07), (0.8, 0.14), (0.79, 0.15)], [(0.93, 0.19), (0.86, 0.19), (0.86, 0.18), (0.92, 0.18)],
     [(0.98, 0.07), (0.98, 0.14), (0.97, 0.13), (0.97, 0.07)], [(0.86, 0.02), (0.93, 0.01), (0.93, 0.03), (0.86, 0.03)],
     [(0.8, 0.14), (0.81, 0.07), (0.82, 0.07), (0.82, 0.13)], [(0.98, 0.14), (0.93, 0.19), (0.92, 0.18), (0.97, 0.13)],
     [(0.93, 0.01), (0.98, 0.07), (0.97, 0.07), (0.93, 0.03)], [(0.81, 0.07), (0.86, 0.02), (0.86, 0.03), (0.82, 0.07)],
     [(0.86, 0.19), (0.8, 0.14), (0.82, 0.13), (0.86, 0.18)], [(0.82, 0.07), (0.86, 0.03), (0.87, 0.04), (0.83, 0.08)],
     [(0.86, 0.18), (0.82, 0.13), (0.83, 0.13), (0.87, 0.17)], [(0.92, 0.18), (0.86, 0.18), (0.87, 0.17), (0.92, 0.16)],
     [(0.97, 0.07), (0.97, 0.13), (0.95, 0.13), (0.96, 0.08)], [(0.86, 0.03), (0.93, 0.03), (0.92, 0.04), (0.87, 0.04)],
     [(0.82, 0.13), (0.82, 0.07), (0.83, 0.08), (0.83, 0.13)], [(0.97, 0.13), (0.92, 0.18), (0.92, 0.16), (0.95, 0.13)],
     [(0.93, 0.03), (0.97, 0.07), (0.96, 0.08), (0.92, 0.04)], [(0.95, 0.13), (0.92, 0.16), (0.9, 0.12), (0.91, 0.11)],
     [(0.92, 0.04), (0.96, 0.08), (0.92, 0.09), (0.9, 0.08)], [(0.83, 0.08), (0.87, 0.04), (0.89, 0.09), (0.88, 0.1)],
     [(0.87, 0.17), (0.83, 0.13), (0.87, 0.11), (0.88, 0.13)], [(0.92, 0.16), (0.87, 0.17), (0.88, 0.13), (0.9, 0.12)],
     [(0.96, 0.08), (0.95, 0.13), (0.91, 0.11), (0.92, 0.09)], [(0.87, 0.04), (0.92, 0.04), (0.9, 0.08), (0.89, 0.09)],
     [(0.89, 0.09), (0.91, 0.11), (0.9, 0.12), (0.88, 0.1)], [(0.9, 0.12), (0.88, 0.13), (0.87, 0.11), (0.88, 0.1)],
     [(0.89, 0.09), (0.9, 0.08), (0.92, 0.09), (0.91, 0.11)], [(0.79, 0.15), (0.8, 0.14), (0.86, 0.19), (0.85, 0.2)],
     [(0.83, 0.13), (0.83, 0.08), (0.88, 0.1), (0.87, 0.11)]])


class Split:
    """This is used to represent a branch split, each vertex position is an interpolation of two vectors, which allows more variation

    Methods:
        __init__ - Initialises the variables
    """

    def __init__(self, entree, sortie, verts1, verts2, faces, uv, uv_height=0.0, seams = []):
        """Initialises the variables

        Args:
            entree - (list of int) The indexes of the entry vertices
            sortie - ((list of int, list of int)) The indexes of the exit vertices
            verts1 - (list of vector) The vertices of the split in one form
            verts2 - (list of vector) The vertices of the split in the second form
            faces - (list of (int, int, int, int)) The faces of the Split
            uv - (list of list of (int, int)) The uvs of the Split
        """
        self.entree = entree
        self.sortie = sortie
        self.verts1 = verts1
        self.verts2 = verts2
        self.faces = faces
        self.uv = uv
        self.uv_height = uv_height


def interpolate(verts1, verts2, t):
    """Linearly interpolates the vertices positions

    Args:
        verts1 - (list of vector) The first positions
        verts2 - (list of vector) The second positions
        t - (float) The interpolation factor

    Returns:
        (list of vector) The interpolated positions
    """
    return [Vector(verts1[i]) * (1 - t) + Vector(verts2[i]) * t for i in range(len(verts1))]


S2 = Split(
    # entree
    [0, 1, 2, 3, 4, 5, 6, 7],
    # sortie
    ([8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22, 23]),
    # verts1
    [(-0.0, 1.0, -0.01), (-0.71, 0.71, -0.01), (-1.0, -0.0, -0.01), (-0.71, -0.71, -0.01), (0.0, -1.0, -0.01),
     (0.71, -0.71, -0.01), (1.0, -0.0, -0.02), (0.71, 0.71, -0.02), (-0.98, 0.89, 1.84), (-1.49, 0.74, 1.62),
     (-1.78, 0.24, 1.53), (-1.67, -0.33, 1.64), (-1.23, -0.64, 1.87), (-0.73, -0.51, 2.09), (-0.46, 0.0, 2.18),
     (-0.56, 0.59, 2.07), (0.72, 1.02, 1.8), (1.3, 0.65, 1.8), (1.29, -0.07, 1.93), (0.81, -0.6, 2.07),
     (0.12, -0.57, 2.13), (-0.37, -0.06, 2.17), (-0.46, 0.62, 2.06), (0.03, 1.05, 1.88), (-1.19, -0.63, 0.6),
     (-1.42, -0.01, 0.52), (-0.71, -1.0, 0.98), (-0.39, -0.91, 1.36), (0.63, -0.72, 1.11), (-0.2, -0.73, 1.49),
     (0.85, 0.64, 0.64), (1.12, 0.01, 0.68), (0.28, 0.97, 0.69), (-0.72, 0.91, 0.89), (-1.21, 0.7, 0.6),
     (-0.36, 0.92, 1.36), (-0.43, -1.0, 0.68), (0.13, -1.05, 0.69), (-.42, 0.09, 0.90), (0.13, 0.16, 0.97)],
    # verts2
    [(-0.0, 1.0, 0.0), (-0.71, 0.71, 0.0), (-1.0, -0.0, 0.0), (-0.71, -0.71, 0.0), (0.0, -1.0, 0.0),
     (0.71, -0.71, 0.0), (1.0, -0.0, -0.0), (0.71, 0.71, -0.01), (-1.34, 0.76, 0.99), (-1.43, 0.53, 0.47),
     (-1.47, -0.01, 0.25), (-1.43, -0.56, 0.48), (-1.33, -0.79, 1.0), (-1.24, -0.58, 1.51), (-1.21, -0.03, 1.72),
     (-1.26, 0.57, 1.53), (0.73, 1.02, 1.08), (1.08, 0.65, 0.61), (1.18, -0.07, 0.7), (1.0, -0.6, 1.16),
     (0.63, -0.57, 1.75), (0.35, -0.06, 2.16), (0.21, 0.62, 2.16), (0.38, 1.05, 1.67), (-0.94, -0.63, 0.26),
     (-1.12, -0.01, 0.09), (-0.8, -1.0, 0.78), (-0.59, -0.81, 1.45), (0.75, -0.72, 0.94), (-0.07, -0.51, 1.66),
     (0.84, 0.64, 0.42), (1.12, 0.01, 0.39), (0.31, 0.97, 0.63), (-0.79, 0.91, 0.69), (-0.96, 0.7, 0.25),
     (-0.38, 0.92, 1.37), (-0.43, -1.0, 0.69), (0.13, -1.05, 0.7), (-.98, 0, 0.16), (0.85, 0.16, 0.49)],
    # faces
    [(25, 24, 11, 10), (15, 14, 21, 22), (2, 3, 24, 25), (12, 26, 27, 13), (12, 11, 24, 26), (20, 29, 28, 19),
     (20, 21, 14, 29), (14, 13, 27, 29), (31, 30, 17, 18), (30, 32, 16, 17), (7, 0, 32, 30), (6, 7, 30, 31),
     (18, 19, 28, 31), (8, 33, 34, 9), (9, 34, 25, 10), (1, 2, 25, 34), (15, 35, 33, 8), (23, 35, 15, 22),
     (35, 23, 16, 32), (33, 35, 32, 0), (34, 33, 0, 1), (5, 6, 31, 28), (36, 26, 24, 3), (37, 36, 3, 4),
     (4, 5, 28, 37), (27, 26, 36, 37), (28, 29, 27, 37)],
    # uv
    [[(0.01, 0.08), (0.09, 0.1), (0.02, 0.23), (-0.05, 0.2)], [(0.85, 0.3), (0.85, 0.35), (0.84, 0.36), (0.84, 0.3)],
     [(0.03, 0.0), (0.13, 0.0), (0.09, 0.1), (0.01, 0.08)], [(0.09, 0.26), (0.17, 0.14), (0.21, 0.19), (0.15, 0.3)],
     [(0.09, 0.26), (0.02, 0.23), (0.09, 0.1), (0.17, 0.14)], [(0.29, 0.31), (0.24, 0.23), (0.36, 0.17), (0.38, 0.31)],
     [(0.29, 0.31), (0.2, 0.36), (0.19, 0.36), (0.24, 0.23)], [(0.19, 0.36), (0.15, 0.3), (0.21, 0.19), (0.24, 0.23)],
     [(0.5, 0.12), (0.61, 0.11), (0.58, 0.29), (0.48, 0.3)], [(0.61, 0.11), (0.71, 0.11), (0.67, 0.28), (0.58, 0.29)],
     [(0.63, 0.0), (0.76, 0.0), (0.71, 0.11), (0.61, 0.11)], [(0.5, 0.0), (0.63, 0.0), (0.61, 0.11), (0.5, 0.12)],
     [(0.48, 0.3), (0.38, 0.31), (0.36, 0.17), (0.5, 0.12)], [(0.9, 0.26), (0.86, 0.14), (0.93, 0.1), (0.96, 0.23)],
     [(0.96, 0.23), (0.93, 0.1), (1.02, 0.08), (1.03, 0.21)], [(0.89, 0.0), (1.0, 0.0), (1.02, 0.08), (0.93, 0.1)],
     [(0.85, 0.3), (0.81, 0.2), (0.86, 0.14), (0.9, 0.26)], [(0.76, 0.28), (0.81, 0.2), (0.85, 0.3), (0.84, 0.3)],
     [(0.81, 0.2), (0.76, 0.28), (0.67, 0.28), (0.71, 0.11)], [(0.86, 0.14), (0.81, 0.2), (0.71, 0.11), (0.76, 0.0)],
     [(0.93, 0.1), (0.86, 0.14), (0.76, 0.0), (0.89, 0.0)], [(0.38, 0.0), (0.5, 0.0), (0.5, 0.12), (0.36, 0.17)],
     [(0.2, 0.1), (0.17, 0.14), (0.09, 0.1), (0.13, 0.0)], [(0.28, 0.1), (0.2, 0.1), (0.13, 0.0), (0.25, 0.0)],
     [(0.25, 0.0), (0.38, 0.0), (0.36, 0.17), (0.28, 0.1)], [(0.21, 0.19), (0.17, 0.14), (0.2, 0.1), (0.28, 0.1)],
     [(0.36, 0.17), (0.24, 0.23), (0.21, 0.19), (0.28, 0.1)]])

S1 = Split(
    # entree
    [0, 1, 2, 3, 4, 5, 6, 7],
    # sortie
    ([8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22, 23]),
    # verts1
    [(0.0, 1.0, 0.0), (-0.71, 0.71, 0.0), (-1.0, -0.0, 0.0), (-0.71, -0.71, 0.0), (0.0, -1.0, 0.0),
     (0.71, -0.71, 0.0), (1.0, 0.0, 0.0), (0.71, 0.71, 0.0), (-0.0, -0.17, 1.01), (-0.42, -0.29, 0.88),
     (-0.59, -0.58, 0.58), (-0.42, -0.88, 0.29), (0.0, -1.0, 0.16), (0.42, -0.88, 0.29), (0.59, -0.58, 0.58),
     (0.42, -0.29, 0.88), (-0.0, 1.0, 0.17), (-0.43, 0.88, 0.29), (-0.61, 0.57, 0.6), (-0.43, 0.26, 0.9),
     (0.0, 0.13, 1.02), (0.43, 0.26, 0.9), (0.61, 0.57, 0.6), (0.43, 0.88, 0.29), (0.85, 0.44, 0.37),
     (0.91, -0.38, 0.42), (0.79, 0.04, 0.65), (0.0, -0.02, 1.02), (0.43, -0.02, 0.89), (-0.43, -0.02, 0.89),
     (-0.91, -0.38, 0.41), (-0.82, 0.04, 0.65), (-0.91, 0.44, 0.37), (0, -1, 1), (0, 1, 1)],
    # verts2
    [(0.0, 1.0, 0.0), (-0.71, 0.71, 0.0), (-1.0, -0.0, 0.0), (-0.71, -0.71, 0.0), (0.0, -1.0, 0.0),
     (0.71, -0.71, 0.0), (1.0, 0.0, 0.0), (0.71, 0.71, 0.0), (-0.0, -0.17, 1.01), (-0.42, -0.29, 0.88),
     (-0.59, -0.58, 0.58), (-0.42, -0.88, 0.29), (0.0, -1.0, 0.16), (0.42, -0.88, 0.29), (0.59, -0.58, 0.58),
     (0.42, -0.29, 0.88), (-0.0, 1.0, 0.17), (-0.43, 0.88, 0.29), (-0.61, 0.57, 0.6), (-0.43, 0.26, 0.9),
     (0.0, 0.13, 1.02), (0.43, 0.26, 0.9), (0.61, 0.57, 0.6), (0.43, 0.88, 0.29), (0.85, 0.44, 0.37),
     (0.91, -0.38, 0.42), (0.79, 0.04, 0.65), (0.0, -0.02, 1.02), (0.43, -0.02, 0.89), (-0.43, -0.02, 0.89),
     (-0.91, -0.38, 0.41), (-0.82, 0.04, 0.65), (-0.91, 0.44, 0.37), (0, -1, 1), (0, 1, 1)],
    # faces
    [(4, 5, 13, 12), (3, 4, 12, 11), (7, 0, 16, 23), (0, 1, 17, 16), (27, 28, 21, 20), (29, 27, 20, 19),
     (25, 13, 5, 6), (6, 7, 23, 24), (22, 26, 24, 23), (14, 13, 25, 26), (24, 26, 25, 6), (9, 8, 27, 29),
     (8, 15, 28, 27), (22, 21, 28, 26), (14, 26, 28, 15), (30, 31, 32, 2), (2, 32, 17, 1), (2, 3, 11, 30),
     (10, 31, 30, 11), (17, 32, 31, 18), (10, 9, 29, 31), (18, 31, 29, 19)],
    # uv
    [[(1.0, 0.32), (0.91, 0.35), (0.94, 0.3), (0.99, 0.3)], [(0.89, 0.01), (0.97, 0.03), (0.97, 0.05), (0.92, 0.05)],
     [(0.73, 0.36), (0.64, 0.34), (0.64, 0.32), (0.7, 0.31)], [(0.65, 0.03), (0.73, 0.01), (0.7, 0.05), (0.65, 0.05)],
     [(0.82, 0.17), (0.82, 0.23), (0.78, 0.24), (0.8, 0.18)], [(0.81, 0.12), (0.82, 0.17), (0.8, 0.18), (0.78, 0.12)],
     [(0.86, 0.31), (0.94, 0.3), (0.91, 0.35), (0.82, 0.36)], [(0.82, 0.36), (0.73, 0.36), (0.7, 0.31), (0.77, 0.32)],
     [(0.75, 0.28), (0.81, 0.28), (0.77, 0.32), (0.7, 0.31)], [(0.89, 0.27), (0.94, 0.3), (0.86, 0.31), (0.81, 0.28)],
     [(0.77, 0.32), (0.81, 0.28), (0.86, 0.31), (0.82, 0.36)], [(0.85, 0.12), (0.84, 0.17), (0.82, 0.17), (0.81, 0.12)],
     [(0.84, 0.17), (0.85, 0.23), (0.82, 0.23), (0.82, 0.17)], [(0.75, 0.28), (0.78, 0.24), (0.82, 0.23), (0.81, 0.28)],
     [(0.89, 0.27), (0.81, 0.28), (0.82, 0.23), (0.85, 0.23)], [(0.85, 0.05), (0.81, 0.07), (0.77, 0.04), (0.81, 0.0)],
     [(0.81, 0.0), (0.77, 0.04), (0.7, 0.05), (0.73, 0.01)], [(0.81, 0.0), (0.89, 0.01), (0.92, 0.05), (0.85, 0.05)],
     [(0.88, 0.08), (0.81, 0.07), (0.85, 0.05), (0.92, 0.05)], [(0.7, 0.05), (0.77, 0.04), (0.81, 0.07), (0.75, 0.08)],
     [(0.88, 0.08), (0.85, 0.12), (0.81, 0.12), (0.81, 0.07)], [(0.75, 0.08), (0.81, 0.07), (0.81, 0.12), (0.78, 0.12)]])


S3 = Split(
    [0, 1, 2, 3, 4, 5, 6, 7],
    ([8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22, 23]),
    [(0.0, 1.0, 0.0), (-0.71, 0.71, 0.0), (-1.01, -0.0, -0.0), (-0.71, -0.71, 0.0), (0.0, -1.0, 0.0),
     (0.71, -0.71, -0.0), (1.01, 0.0, -0.02), (0.71, 0.71, -0.0), (-1.15, 0.76, 2.44), (-1.69, 0.54, 2.4),
     (-1.91, -0.0, 2.38), (-1.69, -0.54, 2.4), (-1.15, -0.76, 2.44), (-0.56, -0.54, 2.51), (-0.22, -0.0, 2.67),
     (-0.56, 0.54, 2.51), (1.23, 0.8, 2.56), (0.67, 0.57, 2.73), (0.41, -0.0, 2.79), (0.67, -0.57, 2.73),
     (1.23, -0.8, 2.56), (1.78, -0.56, 2.39), (2.06, -0.0, 2.34), (1.78, 0.56, 2.39), (0.95, 0.73, 1.87),
     (0.53, 0.55, 2.21), (0.23, -0.0, 2.43), (0.53, -0.55, 2.21), (0.94, -0.73, 1.87), (1.31, -0.5, 1.47),
     (1.6, -0.0, 1.5), (1.36, 0.5, 1.49), (-0.85, 0.71, 1.75), (-1.33, 0.5, 1.53), (-1.63, -0.0, 1.6),
     (-1.33, -0.5, 1.53), (-0.85, -0.71, 1.75), (-0.31, -0.53, 2.09), (-0.01, -0.0, 2.45), (-0.31, 0.53, 2.09),
     (0.04, -0.68, 1.3), (0.09, -0.62, 1.96), (0.06, -0.0, 2.4), (0.09, 0.62, 1.96), (0.04, 0.68, 1.3),
     (-0.37, -0.78, 0.67), (-0.0, -0.88, 0.68), (0.41, -0.79, 0.66), (-0.0, 0.85, 0.68), (-0.48, 0.73, 0.76),
     (0.6, 0.74, 0.76), (0.71, -0.71, -0.0), (0.71, 0.71, -0.0), (1.25, -0.0, 0.99), (0.95, -0.43, 0.93),
     (0.95, 0.43, 0.95), (1.11, -0.0, 0.59), (0.85, -0.28, 0.32), (0.83, 0.26, 0.31), (-1.26, -0.0, 1.1),
     (-0.84, 0.44, 1.04), (-0.84, -0.44, 1.04), (-1.03, -0.0, 0.7), (-0.83, 0.33, 0.42), (-0.82, -0.39, 0.43),
     (-0.0, -0.97, 0.32), (0.54, -0.75, 0.32), (-0.54, -0.75, 0.34), (0.65, 0.73, 0.34), (0.0, 0.96, 0.31),
     (-0.6, 0.72, 0.38), (-1.38, -0.02, 3.41), (-1.16, -0.02, 2.53), (1.55, -0.02, 3.36), (1.26, -0.02, 2.5),
     (-0.22, 0.0, 0.88), (0.29, 0.0, 0.86)],
    [(0.0, 1.0, 0.0), (-0.71, 0.71, 0.0), (-1.01, -0.0, -0.01), (-0.71, -0.71, 0.0), (0.0, -1.0, 0.0),
     (0.71, -0.71, -0.0), (1.0, 0.0, -0.04), (0.71, 0.71, -0.0), (-0.97, 0.74, 2.5), (-1.38, 0.53, 2.25),
     (-1.55, -0.0, 2.15), (-1.38, -0.53, 2.25), (-0.97, -0.74, 2.5), (-0.51, -0.53, 2.78), (-0.26, -0.0, 3.01),
     (-0.51, 0.53, 2.78), (1.42, 0.78, 2.33), (1.13, 0.56, 2.71), (1.0, -0.0, 2.89), (1.13, -0.56, 2.71),
     (1.42, -0.78, 2.33), (1.7, -0.55, 1.97), (1.86, -0.0, 1.81), (1.7, 0.55, 1.97), (0.99, 0.77, 1.87),
     (0.69, 0.59, 2.34), (0.52, -0.0, 2.77), (0.69, -0.59, 2.34), (0.99, -0.77, 1.87), (1.33, -0.52, 1.45),
     (1.58, -0.0, 1.41), (1.37, 0.53, 1.46), (-0.76, 0.79, 1.87), (-1.22, 0.54, 1.55), (-1.46, -0.0, 1.6),
     (-1.22, -0.54, 1.55), (-0.76, -0.79, 1.87), (-0.24, -0.58, 2.35), (0.09, -0.0, 2.82), (-0.24, 0.58, 2.35),
     (0.05, -0.7, 1.28), (0.12, -0.72, 2.1), (0.19, -0.0, 2.75), (0.12, 0.72, 2.1), (0.05, 0.7, 1.28),
     (-0.37, -0.79, 0.65), (0.0, -0.88, 0.68), (0.4, -0.79, 0.65), (0.0, 0.85, 0.68), (-0.47, 0.75, 0.74),
     (0.58, 0.76, 0.74), (0.71, -0.71, -0.0), (0.71, 0.71, -0.0), (1.34, -0.0, 1.01), (0.99, -0.46, 0.91),
     (1.02, 0.47, 0.95), (1.23, -0.0, 0.58), (0.86, -0.29, 0.29), (0.84, 0.27, 0.29), (-1.18, -0.0, 1.05),
     (-0.82, 0.48, 0.99), (-0.82, -0.48, 0.99), (-0.99, -0.0, 0.66), (-0.82, 0.34, 0.39), (-0.81, -0.4, 0.41),
     (-0.0, -0.97, 0.32), (0.54, -0.75, 0.32), (-0.54, -0.75, 0.33), (0.64, 0.73, 0.34), (0.0, 0.96, 0.31),
     (-0.6, 0.72, 0.37), (-1.41, -0.02, 3.36), (-0.97, -0.02, 2.61), (2.2, -0.02, 2.78), (1.54, -0.02, 2.31),
     (-0.44, 0.0, 0.75), (0.66, 0.0, 0.47)],
    [(22, 30, 31, 23), (20, 28, 29, 21), (18, 26, 27, 19), (16, 24, 25, 17), (23, 31, 24, 16), (21, 29, 30, 22),
     (19, 27, 28, 20), (17, 25, 26, 18), (13, 37, 38, 14), (11, 35, 36, 12), (9, 33, 34, 10), (14, 38, 39, 15),
     (12, 36, 37, 13), (10, 34, 35, 11), (8, 32, 33, 9), (15, 39, 32, 8), (44, 32, 39, 43), (43, 39, 38, 42),
     (42, 38, 37, 41), (41, 37, 36, 40), (27, 41, 40, 28), (26, 42, 41, 27), (25, 43, 42, 26), (24, 44, 43, 25),
     (65, 66, 47, 46), (67, 65, 46, 45), (40, 46, 47, 28), (36, 45, 46, 40), (68, 69, 48, 50), (69, 70, 49, 48),
     (44, 48, 49, 32), (24, 50, 48, 44), (31, 30, 53, 55), (30, 29, 54, 53), (55, 53, 56, 58), (53, 54, 57, 56),
     (31, 55, 50, 24), (29, 28, 47, 54), (35, 34, 59, 61), (34, 33, 60, 59), (61, 59, 62, 64), (59, 60, 63, 62),
     (35, 61, 45, 36), (3, 4, 65, 67), (4, 51, 66, 65), (0, 1, 70, 69), (7, 0, 69, 68), (64, 67, 45, 61),
     (33, 32, 49, 60), (70, 63, 60, 49), (58, 68, 50, 55), (66, 57, 54, 47), (62, 63, 2, 64), (3, 67, 64, 2),
     (2, 63, 70, 1), (66, 51, 6, 57), (52, 68, 58, 6), (56, 57, 6, 58)],
    [[(0.5, 0.23), (0.49, 0.04), (0.6, 0.02), (0.62, 0.21)], [(0.25, 0.2), (0.27, 0.05), (0.38, 0.02), (0.38, 0.22)],
     [(0.02, 0.13), (0.03, 0.06), (0.16, 0.07), (0.13, 0.17)], [(0.74, 0.18), (0.71, 0.04), (0.82, 0.05), (0.86, 0.15)],
     [(0.62, 0.21), (0.6, 0.02), (0.71, 0.04), (0.74, 0.18)], [(0.38, 0.22), (0.38, 0.02), (0.49, 0.04), (0.5, 0.23)],
     [(0.13, 0.17), (0.16, 0.07), (0.27, 0.05), (0.25, 0.2)], [(0.86, 0.15), (0.82, 0.05), (0.95, 0.03), (0.97, 0.1)],
     [(0.84, 0.38), (0.85, 0.28), (0.98, 0.32), (0.97, 0.38)], [(0.61, 0.45), (0.61, 0.26), (0.72, 0.27), (0.72, 0.42)],
     [(0.39, 0.45), (0.39, 0.26), (0.5, 0.3), (0.5, 0.46)], [(0.03, 0.38), (0.02, 0.32), (0.15, 0.28), (0.16, 0.38)],
     [(0.72, 0.42), (0.72, 0.27), (0.85, 0.28), (0.84, 0.38)], [(0.5, 0.46), (0.5, 0.3), (0.61, 0.26), (0.61, 0.45)],
     [(0.28, 0.42), (0.28, 0.27), (0.39, 0.26), (0.39, 0.45)], [(0.16, 0.38), (0.15, 0.28), (0.28, 0.27), (0.28, 0.42)],
     [(-0.04, 0.13), (0.02, 0.24), (-0.06, 0.24), (-0.09, 0.19)],
     [(-0.09, 0.19), (-0.06, 0.24), (-0.14, 0.29), (-0.14, 0.28)],
     [(0.5, 0.56), (0.49, 0.56), (0.45, 0.43), (0.53, 0.41)], [(0.53, 0.41), (0.45, 0.43), (0.34, 0.36), (0.52, 0.27)],
     [(0.61, 0.47), (0.53, 0.41), (0.52, 0.27), (0.7, 0.4)], [(0.54, 0.57), (0.5, 0.56), (0.53, 0.41), (0.61, 0.47)],
     [(1.12, 0.24), (1.14, 0.18), (1.23, 0.24), (1.21, 0.26)], [(1.04, 0.25), (1.08, 0.1), (1.14, 0.18), (1.12, 0.24)],
     [(0.52, 0.06), (0.65, 0.07), (0.61, 0.14), (0.52, 0.14)], [(0.39, 0.07), (0.52, 0.06), (0.52, 0.14), (0.43, 0.14)],
     [(0.52, 0.27), (0.52, 0.14), (0.61, 0.14), (0.7, 0.4)], [(0.34, 0.36), (0.43, 0.14), (0.52, 0.14), (0.52, 0.27)],
     [(0.95, 0.04), (1.01, 0.02), (1.03, 0.04), (0.98, 0.1)], [(0.01, 0.03), (0.08, 0.05), (0.05, 0.1), (0.0, 0.07)],
     [(-0.04, 0.13), (0.0, 0.07), (0.05, 0.1), (0.02, 0.24)], [(1.04, 0.25), (0.98, 0.1), (1.03, 0.04), (1.08, 0.1)],
     [(0.96, 0.26), (0.89, 0.31), (0.85, 0.21), (0.93, 0.16)], [(0.89, 0.31), (0.79, 0.32), (0.75, 0.21), (0.85, 0.21)],
     [(0.93, 0.16), (0.85, 0.21), (0.84, 0.13), (0.88, 0.06)], [(0.85, 0.21), (0.75, 0.21), (0.77, 0.07), (0.84, 0.13)],
     [(0.96, 0.26), (0.93, 0.16), (0.98, 0.1), (1.04, 0.25)], [(0.79, 0.32), (0.7, 0.4), (0.61, 0.14), (0.75, 0.21)],
     [(0.24, 0.33), (0.15, 0.32), (0.19, 0.23), (0.3, 0.21)], [(0.15, 0.32), (0.09, 0.27), (0.1, 0.17), (0.19, 0.23)],
     [(0.3, 0.21), (0.19, 0.23), (0.21, 0.14), (0.3, 0.09)], [(0.19, 0.23), (0.1, 0.17), (0.15, 0.07), (0.21, 0.14)],
     [(0.24, 0.33), (0.3, 0.21), (0.43, 0.14), (0.34, 0.36)], [(0.36, 0.0), (0.52, 0.0), (0.52, 0.06), (0.39, 0.07)],
     [(0.52, 0.0), (0.68, 0.0), (0.65, 0.07), (0.52, 0.06)], [(0.01, 0.0), (0.1, 0.0), (0.08, 0.05), (0.01, 0.03)],
     [(0.94, 0.0), (1.0, 0.0), (1.01, 0.02), (0.95, 0.04)], [(0.3, 0.09), (0.39, 0.07), (0.43, 0.14), (0.3, 0.21)],
     [(0.09, 0.27), (0.02, 0.24), (0.05, 0.1), (0.1, 0.17)], [(0.08, 0.05), (0.15, 0.07), (0.1, 0.17), (0.05, 0.1)],
     [(0.88, 0.06), (0.95, 0.04), (0.98, 0.1), (0.93, 0.16)], [(0.65, 0.07), (0.77, 0.07), (0.75, 0.21), (0.61, 0.14)],
     [(0.21, 0.14), (0.15, 0.07), (0.21, 0.0), (0.3, 0.09)], [(0.36, 0.0), (0.39, 0.07), (0.3, 0.09), (0.21, 0.0)],
     [(0.21, 0.0), (0.15, 0.07), (0.08, 0.05), (0.1, 0.0)], [(0.65, 0.07), (0.68, 0.0), (0.83, 0.0), (0.77, 0.07)],
     [(0.94, 0.0), (0.95, 0.04), (0.88, 0.06), (0.83, 0.0)], [(0.84, 0.13), (0.77, 0.07), (0.83, 0.0), (0.88, 0.06)]])

S4 = Split(
    [0, 1, 2, 3, 4, 5, 6, 7],
    ([8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22, 23]),
    [(0.0, 1.0, 0.0), (-0.71, 0.71, 0.0), (-1.0, -0.0, 0.0), (-0.71, -0.71, 0.0), (0.0, -1.0, 0.0), (0.71, -0.71, 0.0),
     (1.0, 0.0, 0.0), (0.71, 0.71, 0.0), (-1.41, 0.48, 2.6), (-1.68, 0.18, 2.56), (-1.66, -0.22, 2.56),
     (-1.36, -0.5, 2.58), (-0.99, -0.48, 2.63), (-0.7, -0.18, 2.71), (-0.69, 0.22, 2.73), (-1.02, 0.5, 2.64),
     (1.11, 0.88, 2.69), (0.37, 0.91, 2.73), (-0.16, 0.37, 2.76), (-0.09, -0.37, 2.8), (0.42, -0.88, 2.83),
     (1.14, -0.87, 2.79), (1.64, -0.35, 2.74), (1.62, 0.37, 2.7), (-0.38, -0.72, 2.43), (-0.49, 0.75, 2.25),
     (0.82, 0.89, 1.78), (0.03, 1.0, 2.04), (0.0, 0.92, 0.63), (-0.71, 0.71, 0.67), (-1.0, -0.0, 0.67),
     (-0.71, -0.71, 0.67), (0.01, -0.99, 0.69), (0.71, -0.71, 0.67), (0.95, 0.07, 0.69), (0.71, 0.71, 0.67),
     (0.23, -0.86, 2.41), (0.94, -0.88, 2.21), (1.23, -0.41, 1.84), (-0.45, 0.28, 2.61), (-0.41, -0.29, 2.6),
     (-0.59, -0.51, 2.51), (-0.67, 0.63, 2.43), (-1.3, 0.53, 2.14), (-1.53, 0.21, 2.06), (-1.5, -0.38, 2.03),
     (-1.23, -0.68, 2.16), (-0.86, -0.69, 2.37), (-1.12, 0.61, 2.29), (1.39, 0.24, 1.83), (0.89, -0.54, 1.21),
     (1.08, 0.15, 1.14), (0.57, 0.76, 1.18), (-0.64, -0.86, 1.65), (-0.2, -0.98, 1.81), (-0.65, -0.83, 1.2),
     (0.4, -0.9, 1.45), (-0.27, -0.96, 1.22), (-1.15, -0.26, 1.37), (-1.0, -0.7, 1.3), (-1.06, -0.14, 1.0),
     (-0.92, -0.6, 0.95), (-1.0, 0.58, 1.55), (-0.57, 0.8, 1.71), (-1.29, 0.25, 1.47), (-0.95, 0.42, 1.1),
     (-0.46, 0.84, 0.99), (-0.68, 0.7, 1.25), (0.16, 1.0, 1.48), (-0.27, 0.92, 1.38), (0.04, 0.96, 1.04),
     (-1.31, 0.01, 3.35), (-1.12, 0.01, 2.5), (0.83, 0.01, 3.56), (0.76, 0.01, 2.66), (-0.19, 0.0, 0.85),
     (0.07, 0.0, 0.9)],
    [(0.0, 1.0, 0.0), (-0.71, 0.71, 0.0), (-1.0, -0.0, 0.0), (-0.71, -0.71, 0.0), (0.0, -1.0, 0.0),
     (0.71, -0.71, 0.0), (1.0, -0.0, 0.0), (0.71, 0.71, 0.0), (-1.29, 0.48, 2.19), (-1.45, 0.18, 2.04),
     (-1.44, -0.22, 2.05), (-1.25, -0.5, 2.2), (-1.01, -0.48, 2.4), (-0.81, -0.18, 2.56), (-0.81, 0.22, 2.59),
     (-1.05, 0.5, 2.41), (0.86, 0.88, 2.22), (0.23, 0.91, 2.48), (-0.26, 0.37, 2.7), (-0.18, -0.37, 2.72),
     (0.3, -0.88, 2.55), (0.92, -0.87, 2.3), (1.34, -0.35, 2.1), (1.31, 0.37, 2.07), (-0.48, -0.72, 2.39),
     (-0.57, 0.75, 2.21), (0.54, 0.89, 1.54), (-0.17, 1.0, 1.96), (0.0, 0.92, 0.63), (-0.71, 0.71, 0.67),
     (-1.0, -0.0, 0.67), (-0.71, -0.71, 0.67), (0.01, -0.99, 0.69), (0.71, -0.71, 0.67), (0.95, 0.07, 0.69),
     (0.71, 0.71, 0.67), (0.06, -0.86, 2.25), (0.67, -0.88, 1.88), (0.94, -0.41, 1.5), (-0.58, 0.28, 2.54),
     (-0.53, -0.29, 2.54), (-0.69, -0.51, 2.44), (-0.75, 0.63, 2.35), (-1.14, 0.53, 1.89), (-1.19, 0.21, 1.66),
     (-1.26, -0.38, 1.72), (-1.09, -0.68, 1.93), (-0.87, -0.69, 2.24), (-1.06, 0.61, 2.09), (1.06, 0.24, 1.44),
     (0.78, -0.54, 1.13), (0.94, 0.15, 1.02), (0.46, 0.76, 1.11), (-0.62, -0.86, 1.63), (-0.32, -0.98, 1.78),
     (-0.65, -0.83, 1.2), (0.29, -0.9, 1.38), (-0.28, -0.96, 1.22), (-0.95, -0.26, 1.23), (-0.97, -0.7, 1.29),
     (-0.99, -0.14, 0.97), (-0.92, -0.6, 0.95), (-0.78, 0.58, 1.42), (-0.61, 0.8, 1.7), (-0.93, 0.25, 1.22),
     (-0.83, 0.42, 1.04), (-0.46, 0.84, 0.99), (-0.63, 0.7, 1.24), (0.06, 1.0, 1.44), (-0.34, 0.92, 1.37),
     (0.03, 0.96, 1.04), (-1.65, 0.01, 2.93), (-1.16, 0.01, 2.4), (1.06, 0.01, 3.35), (0.74, 0.01, 2.58),
     (-0.49, 0.0, 0.53), (0.32, 0.0, 0.77)],
    [(39, 40, 19, 18), (41, 24, 19, 40), (42, 15, 14, 39), (17, 16, 26, 27), (17, 27, 25, 18), (7, 35, 34, 6),
     (5, 33, 32, 4), (3, 31, 30, 2), (1, 29, 28, 0), (0, 28, 35, 7), (6, 34, 33, 5), (4, 32, 31, 3), (2, 30, 29, 1),
     (22, 21, 37, 38), (21, 20, 36, 37), (20, 19, 24, 36), (25, 42, 39, 18), (12, 41, 40, 13), (14, 13, 40, 39),
     (11, 10, 45, 46), (10, 9, 44, 45), (9, 8, 43, 44), (24, 41, 12, 47), (12, 11, 46, 47), (25, 48, 15, 42),
     (15, 48, 43, 8), (49, 23, 22, 38), (23, 49, 26, 16), (34, 35, 52, 51), (33, 34, 51, 50), (49, 51, 52, 26),
     (38, 50, 51, 49), (47, 46, 53, 54), (24, 47, 54, 36), (32, 33, 50, 56), (36, 54, 56, 37), (37, 56, 50, 38),
     (54, 53, 55, 57), (56, 54, 57, 32), (32, 57, 55, 31), (46, 45, 58, 59), (46, 59, 55, 53), (59, 58, 60, 61),
     (55, 59, 61, 31), (30, 31, 61, 60), (43, 48, 63, 62), (27, 63, 48, 25), (30, 60, 65, 29), (60, 58, 64, 65),
     (44, 64, 58, 45), (44, 43, 62, 64), (29, 65, 67, 66), (65, 64, 62, 67), (63, 27, 68, 69), (63, 69, 67, 62),
     (27, 26, 52, 68), (28, 29, 66, 70), (66, 67, 69, 70), (69, 68, 52, 70), (28, 70, 52, 35)],
    [[(0.29, 0.39), (0.3, 0.44), (0.27, 0.45), (0.26, 0.4)], [(0.62, 0.4), (0.65, 0.37), (0.68, 0.44), (0.63, 0.43)],
     [(0.3, 0.35), (0.34, 0.37), (0.31, 0.39), (0.29, 0.39)], [(0.18, 0.38), (0.09, 0.39), (0.11, 0.27), (0.21, 0.3)],
     [(0.18, 0.38), (0.21, 0.3), (0.28, 0.32), (0.26, 0.4)], [(0.1, 0.0), (0.1, 0.1), (0.0, 0.11), (0.0, 0.0)],
     [(0.82, 0.0), (0.84, 0.11), (0.7, 0.11), (0.69, 0.0)], [(0.56, 0.0), (0.57, 0.11), (0.44, 0.11), (0.44, 0.0)],
     [(0.32, 0.0), (0.32, 0.11), (0.21, 0.1), (0.21, 0.0)], [(0.21, 0.0), (0.21, 0.1), (0.1, 0.1), (0.1, 0.0)],
     [(1.0, 0.0), (1.0, 0.11), (0.84, 0.11), (0.82, 0.0)], [(0.69, 0.0), (0.7, 0.11), (0.57, 0.11), (0.56, 0.0)],
     [(0.44, 0.0), (0.44, 0.11), (0.32, 0.11), (0.32, 0.0)], [(0.93, 0.42), (0.85, 0.42), (0.83, 0.34), (0.91, 0.29)],
     [(0.85, 0.42), (0.77, 0.42), (0.74, 0.37), (0.83, 0.34)], [(0.77, 0.42), (0.68, 0.44), (0.65, 0.37), (0.74, 0.37)],
     [(0.28, 0.32), (0.3, 0.35), (0.29, 0.39), (0.26, 0.4)], [(0.56, 0.4), (0.62, 0.4), (0.63, 0.43), (0.59, 0.45)],
     [(0.31, 0.39), (0.32, 0.42), (0.3, 0.44), (0.29, 0.39)], [(0.51, 0.39), (0.46, 0.39), (0.49, 0.33), (0.54, 0.34)],
     [(0.46, 0.39), (0.42, 0.38), (0.42, 0.32), (0.49, 0.33)], [(0.42, 0.38), (0.37, 0.37), (0.37, 0.32), (0.42, 0.32)],
     [(0.65, 0.37), (0.62, 0.4), (0.56, 0.4), (0.58, 0.36)], [(0.56, 0.4), (0.51, 0.39), (0.54, 0.34), (0.58, 0.36)],
     [(0.28, 0.32), (0.35, 0.33), (0.34, 0.37), (0.3, 0.35)], [(0.34, 0.37), (0.35, 0.33), (0.37, 0.32), (0.37, 0.37)],
     [(1.0, 0.29), (1.0, 0.41), (0.93, 0.42), (0.91, 0.29)], [(0.0, 0.41), (0.0, 0.28), (0.11, 0.27), (0.09, 0.39)],
     [(0.0, 0.11), (0.1, 0.1), (0.12, 0.18), (0.0, 0.18)], [(0.84, 0.11), (1.0, 0.11), (1.0, 0.18), (0.88, 0.2)],
     [(0.0, 0.28), (0.0, 0.18), (0.12, 0.18), (0.11, 0.27)], [(0.91, 0.29), (0.88, 0.2), (1.0, 0.18), (1.0, 0.29)],
     [(0.58, 0.36), (0.54, 0.34), (0.61, 0.26), (0.68, 0.28)], [(0.65, 0.37), (0.58, 0.36), (0.68, 0.28), (0.74, 0.37)],
     [(0.7, 0.11), (0.84, 0.11), (0.88, 0.2), (0.77, 0.23)], [(0.74, 0.37), (0.68, 0.28), (0.77, 0.23), (0.83, 0.34)],
     [(0.83, 0.34), (0.77, 0.23), (0.88, 0.2), (0.91, 0.29)], [(0.68, 0.28), (0.61, 0.26), (0.6, 0.2), (0.67, 0.2)],
     [(0.77, 0.23), (0.68, 0.28), (0.67, 0.2), (0.7, 0.11)], [(0.7, 0.11), (0.67, 0.2), (0.6, 0.2), (0.57, 0.11)],
     [(0.54, 0.34), (0.49, 0.33), (0.48, 0.23), (0.55, 0.22)], [(0.54, 0.34), (0.55, 0.22), (0.6, 0.2), (0.61, 0.26)],
     [(0.55, 0.22), (0.48, 0.23), (0.47, 0.17), (0.54, 0.16)], [(0.6, 0.2), (0.55, 0.22), (0.54, 0.16), (0.57, 0.11)],
     [(0.44, 0.11), (0.57, 0.11), (0.54, 0.16), (0.47, 0.17)], [(0.37, 0.32), (0.35, 0.33), (0.29, 0.26), (0.35, 0.24)],
     [(0.21, 0.3), (0.29, 0.26), (0.35, 0.33), (0.28, 0.32)], [(0.44, 0.11), (0.47, 0.17), (0.38, 0.18), (0.32, 0.11)],
     [(0.47, 0.17), (0.48, 0.23), (0.41, 0.25), (0.38, 0.18)], [(0.42, 0.32), (0.41, 0.25), (0.48, 0.23), (0.49, 0.33)],
     [(0.42, 0.32), (0.37, 0.32), (0.35, 0.24), (0.41, 0.25)], [(0.32, 0.11), (0.38, 0.18), (0.32, 0.19), (0.28, 0.15)],
     [(0.38, 0.18), (0.41, 0.25), (0.35, 0.24), (0.32, 0.19)], [(0.29, 0.26), (0.21, 0.3), (0.19, 0.22), (0.25, 0.21)],
     [(0.29, 0.26), (0.25, 0.21), (0.32, 0.19), (0.35, 0.24)], [(0.21, 0.3), (0.11, 0.27), (0.12, 0.18), (0.19, 0.22)],
     [(0.21, 0.1), (0.32, 0.11), (0.28, 0.15), (0.2, 0.16)], [(0.28, 0.15), (0.32, 0.19), (0.25, 0.21), (0.2, 0.16)],
     [(0.25, 0.21), (0.19, 0.22), (0.12, 0.18), (0.2, 0.16)], [(0.21, 0.1), (0.2, 0.16), (0.12, 0.18), (0.1, 0.1)]])


root = Module(
    # entree
    [],
    # sortie
    (1, [0, 1, 2, 3, 4, 5, 6, 7]),
    # verts
    [Vector((0.0, 0.9928191900253296, 0.9806214570999146)),
     Vector((-0.7020291090011597, 0.7020291090011597, 0.9806214570999146)),
     Vector((-0.9928191900253296, -4.3397506033215905e-08, 0.9806214570999146)),
     Vector((-0.7020291090011597, -0.7020291090011597, 0.9806214570999146)),
     Vector((8.679501206643181e-08, -0.9928191900253296, 0.9806214570999146)),
     Vector((0.7020292282104492, -0.7020290493965149, 0.9806214570999146)),
     Vector((0.9928191900253296, 1.1839250468881346e-08, 0.9806214570999146)),
     Vector((0.7020292282104492, 0.7020291090011597, 0.9806214570999146)),
     Vector((0.0, 1.0136922597885132, 0.45493215322494507)),
     Vector((-0.716788649559021, 0.716788649559021, 0.45493215322494507)),
     Vector((-1.0136922597885132, -4.4309896196637055e-08, 0.45493215322494507)),
     Vector((-0.716788649559021, -0.716788649559021, 0.45493215322494507)),
     Vector((8.861979239327411e-08, -1.0136922597885132, 0.45493215322494507)),
     Vector((0.7167887687683105, -0.7167885303497314, 0.45493215322494507)),
     Vector((1.0136922597885132, 1.2088158918288627e-08, 0.45493215322494507)),
     Vector((0.7167887687683105, 0.7167885899543762, 0.45493215322494507)),
     Vector((0.0, 1.1711314916610718, 0.011928796768188477)),
     Vector((-0.8281149864196777, 0.8281149864196777, 0.011928796768188477)),
     Vector((-1.1711314916610718, -5.119178325685425e-08, 0.011928796768188477)),
     Vector((-0.8281149864196777, -0.8281149864196777, 0.011928796768188477)),
     Vector((1.023835665137085e-07, -1.1711314916610718, 0.011928796768188477)),
     Vector((0.8281151056289673, -0.8281148672103882, 0.011928796768188477)),
     Vector((1.1711314916610718, 1.3965602896348628e-08, 0.011928796768188477)),
     Vector((0.8281151056289673, 0.828114926815033, 0.011928796768188477)),
     Vector((0.0, 1.416882872581482, -0.3086543381214142)),
     Vector((-1.0018874406814575, 1.0018874406814575, -0.3086543381214142)),
     Vector((-1.416882872581482, -6.19339104446226e-08, -0.3086543381214142)),
     Vector((-1.0018874406814575, -1.0018874406814575, -0.3086543381214142)),
     Vector((1.238678208892452e-07, -1.416882872581482, -0.3086543381214142)),
     Vector((1.001887559890747, -1.0018872022628784, -0.3086543381214142)),
     Vector((1.416882872581482, 1.6896155585754968e-08, -0.3086543381214142)),
     Vector((1.001887559890747, 1.001887321472168, -0.3086543381214142))],
    # faces
    [(7, 6, 14, 15), (5, 4, 12, 13), (3, 2, 10, 11), (1, 0, 8, 9), (0, 7, 15, 8), (6, 5, 13, 14),
     (4, 3, 11, 12), (2, 1, 9, 10), (9, 8, 16, 17), (8, 15, 23, 16), (14, 13, 21, 22), (12, 11, 19, 20),
     (10, 9, 17, 18), (15, 14, 22, 23), (13, 12, 20, 21), (11, 10, 18, 19), (16, 23, 31, 24),
     (22, 21, 29, 30), (20, 19, 27, 28), (18, 17, 25, 26), (23, 22, 30, 31), (21, 20, 28, 29),
     (19, 18, 26, 27), (17, 16, 24, 25)],
    # uv
    [[(0.9, 0.18), (0.79, 0.18), (0.79, 0.12), (0.9, 0.12)], [(0.65, 0.18), (0.5, 0.18), (0.5, 0.12), (0.65, 0.12)],
     [(0.35, 0.18), (0.21, 0.18), (0.21, 0.12), (0.35, 0.12)], [(0.09, 0.18), (0.0, 0.18), (0.0, 0.12), (0.09, 0.12)],
     [(1.0, 0.18), (0.9, 0.18), (0.9, 0.12), (1.0, 0.12)], [(0.79, 0.18), (0.65, 0.18), (0.65, 0.12), (0.79, 0.12)],
     [(0.5, 0.18), (0.35, 0.18), (0.35, 0.12), (0.5, 0.12)], [(0.21, 0.18), (0.09, 0.18), (0.09, 0.12), (0.21, 0.12)],
     [(0.09, 0.12), (0.0, 0.12), (0.0, 0.05), (0.09, 0.05)], [(1.0, 0.12), (0.9, 0.12), (0.9, 0.05), (1.0, 0.05)],
     [(0.79, 0.12), (0.65, 0.12), (0.65, 0.05), (0.79, 0.05)], [(0.5, 0.12), (0.35, 0.12), (0.35, 0.05), (0.5, 0.05)],
     [(0.21, 0.12), (0.09, 0.12), (0.09, 0.05), (0.21, 0.05)], [(0.9, 0.12), (0.79, 0.12), (0.79, 0.05), (0.9, 0.05)],
     [(0.65, 0.12), (0.5, 0.12), (0.5, 0.05), (0.65, 0.05)], [(0.35, 0.12), (0.21, 0.12), (0.21, 0.05), (0.35, 0.05)],
     [(1.0, 0.05), (0.9, 0.05), (0.9, 0.0), (1.0, 0.0)], [(0.79, 0.05), (0.65, 0.05), (0.65, 0.0), (0.79, 0.0)],
     [(0.5, 0.05), (0.35, 0.05), (0.35, 0.0), (0.5, 0.0)], [(0.21, 0.05), (0.09, 0.05), (0.09, 0.0), (0.21, 0.0)],
     [(0.9, 0.05), (0.79, 0.05), (0.79, 0.0), (0.9, 0.0)], [(0.65, 0.05), (0.5, 0.05), (0.5, 0.0), (0.65, 0.0)],
     [(0.35, 0.05), (0.21, 0.05), (0.21, 0.0), (0.35, 0.0)], [(0.09, 0.05), (0.0, 0.05), (0.0, 0.0), (0.09, 0.0)]],
    0.18)

branch = Module(
    # entree
    [0, 1, 2, 3, 4, 5, 6, 7],
    # sortie
    (1, [0, 1, 2, 3, 4, 5, 6, 7]),
    # verts
    [Vector((0.0, 1.0, 0.0)),
     Vector((-0.7071067690849304, 0.7071067690849304, 0.0)),
     Vector((-1.0, -4.371138828673793e-08, 0.0)),
     Vector((-0.7071067690849304, -0.7071067690849304, 0.0)),
     Vector((8.742277657347586e-08, -1.0, 0.0)),
     Vector((0.70710688829422, -0.7071066498756409, 0.0)),
     Vector((1.0, 1.1924880638503055e-08, 0.0)),
     Vector((0.70710688829422, 0.7071067094802856, 0.0))],
    # faces
    [],
    [[(0.87, 0.1), (0.87, 0.0), (1.0, 0.0), (1.0, 0.1)], [(0.75, 0.1), (0.75, 0.0), (0.87, 0.0), (0.87, 0.1)],
     [(0.62, 0.1), (0.62, 0.0), (0.75, 0.0), (0.75, 0.1)], [(0.5, 0.1), (0.5, 0.0), (0.62, 0.0), (0.62, 0.1)],
     [(0.37, 0.1), (0.37, 0.0), (0.5, 0.0), (0.5, 0.1)], [(0.25, 0.1), (0.25, 0.0), (0.37, 0.0), (0.37, 0.1)],
     [(0.13, 0.1), (0.13, 0.0), (0.25, 0.0), (0.25, 0.1)], [(0.0, 0.1), (0.0, 0.0), (0.13, 0.0), (0.13, 0.1)]],
    .1000976216)

trunk = Split(
    # entree
    [0, 1, 2, 3, 4, 5, 6, 7],
    # sortie
    ([8, 9, 10, 11, 12, 13, 14, 15], [55, 56, 57, 58, 59, 60, 61, 62]),
    # verts1
    [(0.0, 1.0, -0.0), (-0.71, 0.71, -0.0), (-1.0, -0.0, -0.0), (-0.71, -0.71, -0.0), (0.0, -1.0, -0.0),
     (0.71, -0.71, -0.0), (1.0, 0.0, -0.0), (0.71, 0.71, -0.0), (0.0, 0.98, 1.37), (-0.69, 0.69, 1.37),
     (-0.98, -0.0, 1.37), (-0.75, -0.64, 1.38), (0.0, -0.91, 1.4), (0.75, -0.64, 1.38), (0.98, 0.0, 1.37),
     (0.69, 0.69, 1.37), (0.0, -0.95, 1.39), (-0.51, -0.89, 1.21), (-0.64, -1.01, 0.75), (-0.47, -1.22, 0.35),
     (0.0, -1.34, 0.25), (0.47, -1.22, 0.35), (0.64, -1.01, 0.75), (0.51, -0.89, 1.21), (0.99, -0.04, 0.17),
     (0.99, -0.04, 1.07), (0.7, 0.7, 1.07), (0.7, 0.7, 0.17), (0.0, -1.23, 0.15), (0.0, -0.93, 1.38),
     (0.66, -0.74, 1.28), (0.59, -1.03, 0.18), (-0.99, -0.0, 0.17), (-0.99, -0.0, 1.07), (-0.66, -0.74, 1.28),
     (-0.59, -1.03, 0.18), (0.0, 0.99, 0.17), (0.0, 0.99, 1.07), (-0.7, 0.7, 1.07), (-0.7, 0.7, 0.17),
     (0.96, -0.11, 0.62), (0.7, 0.7, 0.62), (0.72, -0.8, 0.63), (-0.96, -0.11, 0.62), (-0.72, -0.8, 0.63),
     (0.0, 0.99, 0.62), (-0.7, 0.7, 0.62), (0.0, -1.0, 1.43), (-0.43, -1.09, 1.3), (-0.6, -1.38, 0.99),
     (-0.41, -1.66, 0.69), (0.0, -1.78, 0.57), (0.41, -1.66, 0.69), (0.6, -1.38, 0.99), (0.43, -1.09, 1.3),
     (0.0, -1.08, 1.49), (-0.42, -1.23, 1.41), (-0.59, -1.6, 1.22), (-0.42, -1.98, 1.03), (0.0, -2.13, 0.95),
     (0.42, -1.98, 1.03), (0.59, -1.6, 1.22), (0.42, -1.23, 1.41), (0, 0, 1), (0, -0.35, 0.59)],
    # verts2
    [(0.0, 1.0, -0.04), (-0.71, 0.71, -0.04), (-1.0, -0.0, -0.04), (-0.71, -0.71, -0.04), (0.0, -0.98, -0.04),
     (0.71, -0.71, -0.04), (1.0, 0.0, -0.04), (0.71, 0.71, -0.04), (0.0, 0.98, 1.31), (-0.69, 0.69, 1.31),
     (-0.98, -0.0, 1.31), (-0.69, -0.69, 1.31), (0.0, -0.95, 1.31), (0.69, -0.69, 1.31), (0.98, 0.0, 1.31),
     (0.69, 0.69, 1.31), (0.0, -1.02, 1.24), (-0.45, -0.95, 1.07), (-0.59, -0.91, 0.63), (-0.46, -0.96, 0.2),
     (0.0, -1.03, 0.02), (0.46, -0.96, 0.2), (0.59, -0.91, 0.63), (0.45, -0.95, 1.07), (0.99, -0.04, 0.17),
     (0.99, -0.04, 1.07), (0.7, 0.7, 1.07), (0.7, 0.7, 0.17), (0.0, -0.99, -0.01), (0.0, -0.99, 1.25),
     (0.59, -0.85, 1.14), (0.6, -0.85, 0.11), (-0.99, -0.0, 0.17), (-0.99, -0.0, 1.07), (-0.59, -0.85, 1.14),
     (-0.6, -0.85, 0.11), (0.0, 0.99, 0.17), (0.0, 0.99, 1.07), (-0.7, 0.7, 1.07), (-0.7, 0.7, 0.17),
     (0.96, -0.11, 0.62), (0.7, 0.7, 0.62), (0.69, -0.75, 0.62), (-0.96, -0.11, 0.62), (-0.69, -0.75, 0.62),
     (0.0, 0.99, 0.62), (-0.7, 0.7, 0.62), (-0.0, -1.11, 1.19), (-0.39, -1.11, 1.03), (-0.55, -1.11, 0.64),
     (-0.39, -1.11, 0.25), (0.0, -1.1, 0.09), (0.39, -1.11, 0.25), (0.55, -1.11, 0.64), (0.39, -1.11, 1.03),
     (0.0, -1.27, 1.18), (-0.38, -1.27, 1.02), (-0.54, -1.26, 0.65), (-0.38, -1.25, 0.27), (0.0, -1.25, 0.11),
     (0.38, -1.25, 0.27), (0.54, -1.26, 0.65), (0.38, -1.27, 1.02), (0, 0, 1), (0, -1, 0)],
    # faces
    [(26, 15, 14, 25), (30, 13, 12, 29), (34, 11, 10, 33), (38, 9, 8, 37), (37, 8, 15, 26), (25, 14, 13, 30),
     (29, 12, 11, 34), (33, 10, 9, 38), (2, 32, 39, 1), (43, 33, 38, 46), (4, 28, 35, 3), (6, 24, 31, 5),
     (40, 25, 30, 42), (0, 36, 27, 7), (45, 37, 26, 41), (1, 39, 36, 0), (46, 38, 37, 45), (3, 35, 32, 2),
     (44, 34, 33, 43), (5, 31, 28, 4), (7, 27, 24, 6), (41, 26, 25, 40), (27, 41, 40, 24), (35, 44, 43, 32),
     (39, 46, 45, 36), (36, 45, 41, 27), (24, 40, 42, 31), (32, 43, 46, 39), (17, 34, 44, 18), (18, 44, 35, 19),
     (19, 35, 28, 20), (20, 28, 31, 21), (21, 31, 42, 22), (22, 42, 30, 23), (23, 30, 29, 16), (16, 29, 34, 17),
     (16, 47, 54, 23), (23, 54, 53, 22), (22, 53, 52, 21), (21, 52, 51, 20), (20, 51, 50, 19), (19, 50, 49, 18),
     (18, 49, 48, 17), (17, 48, 47, 16), (53, 54, 62, 61), (51, 52, 60, 59), (49, 50, 58, 57), (47, 48, 56, 55),
     (54, 47, 55, 62), (52, 53, 61, 60), (50, 51, 59, 58), (48, 49, 57, 56)],
    # uv
    [[(0.88, 0.26), (0.87, 0.33), (0.77, 0.33), (0.77, 0.26)], [(0.66, 0.29), (0.67, 0.33), (0.56, 0.33), (0.57, 0.32)],
     [(0.46, 0.3), (0.43, 0.33), (0.3, 0.33), (0.3, 0.26)], [(0.16, 0.26), (0.16, 0.33), (0.0, 0.33), (0.0, 0.26)],
     [(1.0, 0.27), (1.0, 0.33), (0.87, 0.33), (0.88, 0.26)], [(0.77, 0.26), (0.77, 0.33), (0.67, 0.33), (0.66, 0.29)],
     [(0.57, 0.32), (0.56, 0.33), (0.43, 0.33), (0.46, 0.3)], [(0.3, 0.26), (0.3, 0.33), (0.16, 0.33), (0.16, 0.26)],
     [(0.3, 0.0), (0.3, 0.05), (0.16, 0.05), (0.16, 0.0)], [(0.32, 0.15), (0.3, 0.26), (0.16, 0.26), (0.16, 0.15)],
     [(0.56, 0.0), (0.56, 0.03), (0.49, 0.05), (0.43, 0.0)], [(0.77, 0.0), (0.76, 0.05), (0.61, 0.05), (0.67, 0.0)],
     [(0.75, 0.16), (0.77, 0.26), (0.66, 0.29), (0.68, 0.15)], [(1.0, 0.0), (1.0, 0.04), (0.87, 0.05), (0.87, 0.0)],
     [(1.0, 0.15), (1.0, 0.27), (0.88, 0.26), (0.88, 0.16)], [(0.16, 0.0), (0.16, 0.05), (0.0, 0.04), (0.0, 0.0)],
     [(0.16, 0.15), (0.16, 0.26), (0.0, 0.26), (0.0, 0.15)], [(0.43, 0.0), (0.49, 0.05), (0.3, 0.05), (0.3, 0.0)],
     [(0.43, 0.14), (0.46, 0.3), (0.3, 0.26), (0.32, 0.15)], [(0.67, 0.0), (0.61, 0.05), (0.56, 0.03), (0.56, 0.0)],
     [(0.87, 0.0), (0.87, 0.05), (0.76, 0.05), (0.77, 0.0)], [(0.88, 0.16), (0.88, 0.26), (0.77, 0.26), (0.75, 0.16)],
     [(0.87, 0.05), (0.88, 0.16), (0.75, 0.16), (0.76, 0.05)], [(0.49, 0.05), (0.43, 0.14), (0.32, 0.15), (0.3, 0.05)],
     [(0.16, 0.05), (0.16, 0.15), (0.0, 0.15), (0.0, 0.04)], [(1.0, 0.04), (1.0, 0.15), (0.88, 0.16), (0.87, 0.05)],
     [(0.76, 0.05), (0.75, 0.16), (0.68, 0.15), (0.61, 0.05)], [(0.3, 0.05), (0.32, 0.15), (0.16, 0.15), (0.16, 0.05)],
     [(0.5, 0.28), (0.46, 0.3), (0.43, 0.14), (0.5, 0.17)], [(0.5, 0.17), (0.43, 0.14), (0.49, 0.05), (0.51, 0.09)],
     [(0.51, 0.09), (0.49, 0.05), (0.56, 0.03), (0.56, 0.07)], [(0.56, 0.07), (0.56, 0.03), (0.61, 0.05), (0.6, 0.09)],
     [(0.6, 0.09), (0.61, 0.05), (0.68, 0.15), (0.63, 0.17)], [(0.63, 0.17), (0.68, 0.15), (0.66, 0.29), (0.61, 0.27)],
     [(0.61, 0.27), (0.66, 0.29), (0.57, 0.32), (0.56, 0.3)], [(0.56, 0.3), (0.57, 0.32), (0.46, 0.3), (0.5, 0.28)],
     [(0.5, 0.0), (0.5, 0.13), (0.38, 0.13), (0.38, 0.0)], [(0.38, 0.0), (0.38, 0.13), (0.25, 0.13), (0.25, 0.0)],
     [(0.25, 0.0), (0.25, 0.13), (0.12, 0.13), (0.12, 0.0)], [(0.12, 0.0), (0.12, 0.13), (0.0, 0.13), (0.0, 0.0)],
     [(1.0, 0.0), (1.0, 0.13), (0.87, 0.13), (0.87, 0.0)], [(0.87, 0.0), (0.87, 0.13), (0.74, 0.13), (0.74, 0.0)],
     [(0.74, 0.0), (0.74, 0.13), (0.62, 0.13), (0.62, 0.0)], [(0.62, 0.0), (0.62, 0.13), (0.5, 0.13), (0.5, 0.0)],
     [(0.25, 0.13), (0.38, 0.13), (0.38, 0.25), (0.25, 0.25)], [(0.0, 0.13), (0.12, 0.13), (0.12, 0.25), (0.0, 0.25)],
     [(0.74, 0.13), (0.87, 0.13), (0.87, 0.25), (0.74, 0.25)], [(0.5, 0.13), (0.62, 0.13), (0.62, 0.25), (0.5, 0.25)],
     [(0.38, 0.13), (0.5, 0.13), (0.5, 0.25), (0.38, 0.25)], [(0.12, 0.13), (0.25, 0.13), (0.25, 0.25), (0.12, 0.25)],
     [(0.87, 0.13), (1.0, 0.13), (1.0, 0.25), (0.87, 0.25)], [(0.62, 0.13), (0.74, 0.13), (0.74, 0.25), (0.62, 0.25)]],
    .338)


trunk2 = Split(
    [0, 1, 2, 3, 4, 5, 6, 7],
    ([8, 9, 10, 11, 12, 13, 14, 15],
     [16, 17, 18, 19, 20, 21, 22, 23]),
    [(0.39, 0.92, 0.0), (-0.38, 0.93, 0.0), (-0.92, 0.39, 0.0), (-0.93, -0.38, 0.0), (-0.39, -0.92, 0.0),
     (0.38, -0.93, 0.0), (0.92, -0.39, 0.0), (0.93, 0.38, 0.0), (0.24, 0.93, 1.83), (-0.53, 0.92, 1.83),
     (-1.06, 0.38, 1.83), (-1.06, -0.39, 1.83), (-0.51, -0.93, 1.83), (0.25, -0.92, 1.83), (0.79, -0.38, 1.83),
     (0.78, 0.39, 1.83), (1.46, 0.36, 1.35), (1.2, 0.36, 1.52), (1.02, 0.14, 1.65), (1.02, -0.17, 1.64),
     (1.2, -0.39, 1.52), (1.46, -0.39, 1.34), (1.64, -0.17, 1.22), (1.64, 0.14, 1.22), (1.39, 0.2, 0.88),
     (1.39, -0.19, 0.88), (1.2, -0.64, 1.11), (1.11, -0.6, 1.29), (1.17, 0.29, 0.53), (1.17, -0.29, 0.52),
     (0.84, -0.53, 1.69), (0.63, -0.82, 1.6), (0.99, 0.5, 1.68), (1.08, 0.69, 1.3), (1.17, 0.61, 1.07),
     (0.76, 0.85, 1.61), (0.31, 0.96, 1.32), (-0.45, 0.96, 1.32), (-1.0, 0.42, 1.32), (-1.0, -0.34, 1.32),
     (-0.46, -0.89, 1.32), (0.31, -0.89, 1.32), (0.68, -0.83, 1.22), (1.1, -0.63, 0.67), (0.66, -0.77, 0.67),
     (0.89, -0.69, 0.22), (0.35, -0.91, 0.46), (-0.95, -0.37, 0.46), (-0.41, -0.91, 0.46), (-0.41, 0.94, 0.46),
     (-0.95, 0.4, 0.46), (1.04, 0.59, 0.68), (0.36, 0.94, 0.46), (0.82, 0.73, 0.38), (0.65, 0.82, 0.74),
     (0.69, 0.87, 1.19), (-0.1, -0.05, 1.94), (-0.12, -0.05, 2.89), (1.33, -0.05, 1.48), (1.9, -0.05, 2.25),
     (-0.02, 0.0, 0.95), (0.57, 0.0, 0.77)],
    [(0.39, 0.92, 0.0), (-0.38, 0.93, 0.0), (-0.92, 0.39, 0.0), (-0.93, -0.38, 0.0), (-0.39, -0.92, 0.0),
     (0.38, -0.93, 0.0), (0.92, -0.39, 0.0), (0.92, 0.38, 0.0), (0.24, 0.93, 1.83), (-0.53, 0.92, 1.83),
     (-1.06, 0.38, 1.83), (-1.06, -0.39, 1.83), (-0.51, -0.93, 1.83), (0.25, -0.92, 1.83), (0.81, -0.38, 1.85),
     (0.8, 0.39, 1.85), (1.26, 0.36, 1.19), (1.18, 0.36, 1.49), (1.1, 0.14, 1.7), (1.11, -0.17, 1.69),
     (1.18, -0.39, 1.49), (1.26, -0.39, 1.19), (1.29, -0.17, 0.97), (1.29, 0.14, 0.97), (1.17, 0.2, 0.8),
     (1.17, -0.19, 0.8), (1.11, -0.64, 1.08), (1.02, -0.6, 1.27), (1.03, 0.29, 0.51), (1.03, -0.29, 0.51),
     (0.84, -0.53, 1.7), (0.63, -0.82, 1.6), (0.99, 0.5, 1.67), (1.03, 0.69, 1.29), (1.08, 0.61, 1.05),
     (0.76, 0.85, 1.61), (0.31, 0.96, 1.32), (-0.45, 0.96, 1.32), (-1.0, 0.42, 1.32), (-1.0, -0.34, 1.32),
     (-0.46, -0.89, 1.32), (0.31, -0.89, 1.32), (0.68, -0.83, 1.22), (1.02, -0.63, 0.67), (0.65, -0.77, 0.67),
     (0.88, -0.69, 0.22), (0.35, -0.91, 0.46), (-0.95, -0.37, 0.46), (-0.41, -0.91, 0.46), (-0.41, 0.94, 0.46),
     (-0.95, 0.4, 0.46), (0.95, 0.59, 0.68), (0.36, 0.94, 0.46), (0.81, 0.73, 0.38), (0.65, 0.82, 0.74),
     (0.69, 0.87, 1.19), (-0.13, -0.05, 1.94), (-0.1, -0.05, 2.89), (0.94, -0.05, 1.26), (2.19, -0.05, 1.53),
     (0.03, 0.0, 0.95), (1.25, 0.0, 0.27)],
    [(15, 14, 19, 18), (23, 22, 25, 24), (20, 27, 26, 21), (21, 26, 25, 22), (6, 7, 28, 29), (25, 29, 28, 24),
     (20, 30, 31, 27), (20, 19, 14, 30), (14, 13, 31, 30), (17, 32, 15, 18), (16, 34, 33, 17), (16, 23, 24, 34),
     (32, 17, 33, 35), (8, 15, 32, 35), (48, 40, 39, 47), (50, 38, 37, 49), (46, 41, 40, 48), (47, 39, 38, 50),
     (49, 37, 36, 52), (12, 40, 41, 13), (11, 39, 40, 12), (10, 38, 39, 11), (9, 37, 38, 10), (8, 36, 37, 9),
     (42, 26, 27, 31), (31, 13, 41, 42), (26, 42, 44, 43), (25, 26, 43, 29), (43, 44, 46, 45), (29, 43, 45, 6),
     (5, 6, 45, 46), (1, 49, 52, 0), (3, 47, 50, 2), (5, 46, 48, 4), (2, 50, 49, 1), (4, 48, 47, 3), (41, 46, 44, 42),
     (51, 34, 24, 28), (51, 28, 7, 53), (0, 52, 53, 7), (51, 53, 52, 54), (36, 55, 54, 52), (35, 55, 36, 8),
     (34, 55, 35, 33), (34, 51, 54, 55)],
    [[(0.57, 0.33), (0.44, 0.33), (0.49, 0.28), (0.53, 0.28)], [(0.53, 0.19), (0.51, 0.19), (0.5, 0.15), (0.54, 0.15)],
     [(0.47, 0.24), (0.45, 0.21), (0.45, 0.18), (0.49, 0.21)], [(0.49, 0.21), (0.45, 0.18), (0.5, 0.15), (0.51, 0.19)],
     [(0.46, 0.0), (0.58, 0.0), (0.56, 0.1), (0.48, 0.1)], [(0.5, 0.15), (0.48, 0.1), (0.56, 0.1), (0.54, 0.15)],
     [(0.47, 0.24), (0.43, 0.29), (0.39, 0.27), (0.45, 0.21)], [(0.47, 0.24), (0.49, 0.28), (0.44, 0.33), (0.43, 0.29)],
     [(0.44, 0.33), (0.33, 0.33), (0.39, 0.27), (0.43, 0.29)], [(0.55, 0.24), (0.57, 0.28), (0.57, 0.33), (0.53, 0.28)],
     [(0.54, 0.21), (0.59, 0.18), (0.6, 0.22), (0.55, 0.24)], [(0.54, 0.21), (0.53, 0.19), (0.54, 0.15), (0.59, 0.18)],
     [(0.57, 0.28), (0.55, 0.24), (0.6, 0.22), (0.63, 0.27)], [(0.71, 0.33), (0.57, 0.33), (0.57, 0.28), (0.63, 0.27)],
     [(0.23, 0.08), (0.22, 0.24), (0.12, 0.24), (0.12, 0.09)], [(1.0, 0.09), (1.0, 0.24), (0.85, 0.24), (0.85, 0.09)],
     [(0.34, 0.08), (0.33, 0.23), (0.22, 0.24), (0.23, 0.08)], [(0.12, 0.09), (0.12, 0.24), (0.0, 0.24), (0.0, 0.08)],
     [(0.85, 0.09), (0.85, 0.24), (0.71, 0.24), (0.72, 0.08)], [(0.23, 0.33), (0.22, 0.24), (0.33, 0.23), (0.33, 0.33)],
     [(0.12, 0.33), (0.12, 0.24), (0.22, 0.24), (0.23, 0.33)], [(0.0, 0.33), (0.0, 0.24), (0.12, 0.24), (0.12, 0.33)],
     [(0.85, 0.33), (0.85, 0.24), (1.0, 0.24), (1.0, 0.33)], [(0.71, 0.33), (0.71, 0.24), (0.85, 0.24), (0.85, 0.33)],
     [(0.38, 0.21), (0.45, 0.18), (0.45, 0.21), (0.39, 0.27)], [(0.39, 0.27), (0.33, 0.33), (0.33, 0.23), (0.38, 0.21)],
     [(0.45, 0.18), (0.38, 0.21), (0.38, 0.12), (0.44, 0.12)], [(0.5, 0.15), (0.45, 0.18), (0.44, 0.12), (0.48, 0.1)],
     [(0.44, 0.12), (0.38, 0.12), (0.34, 0.08), (0.42, 0.05)], [(0.48, 0.1), (0.44, 0.12), (0.42, 0.05), (0.46, 0.0)],
     [(0.35, 0.0), (0.46, 0.0), (0.42, 0.05), (0.34, 0.08)], [(0.85, 0.0), (0.85, 0.09), (0.72, 0.08), (0.71, 0.0)],
     [(0.12, 0.0), (0.12, 0.09), (0.0, 0.08), (0.0, 0.0)], [(0.35, 0.0), (0.34, 0.08), (0.23, 0.08), (0.23, 0.0)],
     [(1.0, 0.0), (1.0, 0.09), (0.85, 0.09), (0.85, 0.0)], [(0.23, 0.0), (0.23, 0.08), (0.12, 0.09), (0.12, 0.0)],
     [(0.33, 0.23), (0.34, 0.08), (0.38, 0.12), (0.38, 0.21)], [(0.6, 0.12), (0.59, 0.18), (0.54, 0.15), (0.56, 0.1)],
     [(0.6, 0.12), (0.56, 0.1), (0.58, 0.0), (0.64, 0.07)], [(0.71, 0.0), (0.72, 0.08), (0.64, 0.07), (0.58, 0.0)],
     [(0.6, 0.12), (0.64, 0.07), (0.72, 0.08), (0.67, 0.13)], [(0.71, 0.24), (0.66, 0.21), (0.67, 0.13), (0.72, 0.08)],
     [(0.63, 0.27), (0.66, 0.21), (0.71, 0.24), (0.71, 0.33)], [(0.59, 0.18), (0.66, 0.21), (0.63, 0.27), (0.6, 0.22)],
     [(0.59, 0.18), (0.6, 0.12), (0.67, 0.13), (0.66, 0.21)]],
    .331)

trunk3 = Split(
    [0, 1, 2, 3, 4, 5, 6, 7],
    ([8, 9, 10, 11, 12, 13, 14, 15],
     [16, 17, 18, 19, 20, 21, 22, 23]),
    [(0.39, 0.92, 0.0), (-0.38, 0.93, 0.0), (-0.92, 0.39, 0.0), (-0.93, -0.38, 0.0), (-0.39, -0.92, 0.0),
     (0.38, -0.93, 0.0), (0.92, -0.39, 0.0), (0.93, 0.38, 0.0), (0.24, 0.93, 1.83), (-0.53, 0.92, 1.83),
     (-1.06, 0.38, 1.83), (-1.06, -0.39, 1.83), (-0.51, -0.93, 1.83), (0.25, -0.92, 1.83), (0.79, -0.38, 1.83),
     (0.78, 0.39, 1.83), (1.51, 0.44, 1.48), (1.2, 0.44, 1.69), (0.99, 0.17, 1.83), (0.99, -0.2, 1.83),
     (1.21, -0.46, 1.68), (1.51, -0.46, 1.47), (1.73, -0.2, 1.32), (1.73, 0.18, 1.32), (1.39, 0.2, 0.88),
     (1.39, -0.19, 0.88), (1.2, -0.64, 1.11), (1.11, -0.6, 1.29), (1.17, 0.29, 0.53), (1.17, -0.29, 0.52),
     (0.84, -0.53, 1.69), (0.63, -0.82, 1.6), (0.99, 0.5, 1.68), (1.08, 0.69, 1.3), (1.17, 0.61, 1.07),
     (0.76, 0.85, 1.61), (0.31, 0.96, 1.32), (-0.45, 0.96, 1.32), (-1.0, 0.42, 1.32), (-1.0, -0.34, 1.32),
     (-0.46, -0.89, 1.32), (0.31, -0.89, 1.32), (0.68, -0.83, 1.22), (1.1, -0.63, 0.67), (0.66, -0.77, 0.67),
     (0.89, -0.69, 0.22), (0.35, -0.91, 0.46), (-0.95, -0.37, 0.46), (-0.41, -0.91, 0.46), (-0.41, 0.94, 0.46),
     (-0.95, 0.4, 0.46), (1.04, 0.59, 0.68), (0.36, 0.94, 0.46), (0.82, 0.73, 0.38), (0.65, 0.82, 0.74),
     (0.69, 0.87, 1.19), (-0.1, -0.05, 1.94), (-0.12, -0.05, 2.89), (1.33, -0.05, 1.48), (1.9, -0.05, 2.25),
     (-0.02, 0.0, 0.95), (0.57, 0.0, 0.77)],
    [(0.39, 0.92, 0.0), (-0.38, 0.93, 0.0), (-0.92, 0.39, 0.0), (-0.93, -0.38, 0.0), (-0.39, -0.92, 0.0),
     (0.38, -0.93, 0.0), (0.92, -0.39, 0.0), (0.92, 0.38, 0.0), (0.24, 0.93, 1.83), (-0.53, 0.92, 1.83),
     (-1.06, 0.38, 1.83), (-1.06, -0.39, 1.83), (-0.51, -0.93, 1.83), (0.25, -0.92, 1.83), (0.81, -0.38, 1.85),
     (0.8, 0.39, 1.85), (1.31, 0.44, 1.32), (1.18, 0.44, 1.66), (1.07, 0.17, 1.88), (1.07, -0.2, 1.88),
     (1.19, -0.46, 1.65), (1.31, -0.46, 1.32), (1.38, -0.2, 1.07), (1.38, 0.18, 1.07), (1.17, 0.2, 0.8),
     (1.17, -0.19, 0.8), (1.11, -0.64, 1.08), (1.02, -0.6, 1.27), (1.03, 0.29, 0.51), (1.03, -0.29, 0.51),
     (0.84, -0.53, 1.7), (0.63, -0.82, 1.6), (0.99, 0.5, 1.67), (1.03, 0.69, 1.29), (1.08, 0.61, 1.05),
     (0.76, 0.85, 1.61), (0.31, 0.96, 1.32), (-0.45, 0.96, 1.32), (-1.0, 0.42, 1.32), (-1.0, -0.34, 1.32),
     (-0.46, -0.89, 1.32), (0.31, -0.89, 1.32), (0.68, -0.83, 1.22), (1.02, -0.63, 0.67), (0.65, -0.77, 0.67),
     (0.88, -0.69, 0.22), (0.35, -0.91, 0.46), (-0.95, -0.37, 0.46), (-0.41, -0.91, 0.46), (-0.41, 0.94, 0.46),
     (-0.95, 0.4, 0.46), (0.95, 0.59, 0.68), (0.36, 0.94, 0.46), (0.81, 0.73, 0.38), (0.65, 0.82, 0.74),
     (0.69, 0.87, 1.19), (-0.13, -0.05, 1.94), (-0.1, -0.05, 2.89), (0.94, -0.05, 1.26), (2.19, -0.05, 1.53),
     (0.03, 0.0, 0.95), (1.25, 0.0, 0.27)],
    [(15, 14, 19, 18), (23, 22, 25, 24), (20, 27, 26, 21), (21, 26, 25, 22), (6, 7, 28, 29), (25, 29, 28, 24),
     (20, 30, 31, 27), (20, 19, 14, 30), (14, 13, 31, 30), (17, 32, 15, 18), (16, 34, 33, 17), (16, 23, 24, 34),
     (32, 17, 33, 35), (8, 15, 32, 35), (48, 40, 39, 47), (50, 38, 37, 49), (46, 41, 40, 48), (47, 39, 38, 50),
     (49, 37, 36, 52), (12, 40, 41, 13), (11, 39, 40, 12), (10, 38, 39, 11), (9, 37, 38, 10), (8, 36, 37, 9),
     (42, 26, 27, 31), (31, 13, 41, 42), (26, 42, 44, 43), (25, 26, 43, 29), (43, 44, 46, 45), (29, 43, 45, 6),
     (5, 6, 45, 46), (1, 49, 52, 0), (3, 47, 50, 2), (5, 46, 48, 4), (2, 50, 49, 1), (4, 48, 47, 3),
     (41, 46, 44, 42), (51, 34, 24, 28), (51, 28, 7, 53), (0, 52, 53, 7), (51, 53, 52, 54), (36, 55, 54, 52),
     (35, 55, 36, 8), (34, 55, 35, 33), (34, 51, 54, 55)],
    [[(0.55, 0.3), (0.44, 0.3), (0.47, 0.27), (0.51, 0.27)], [(0.51, 0.19), (0.49, 0.19), (0.48, 0.14), (0.52, 0.14)],
     [(0.46, 0.23), (0.43, 0.2), (0.44, 0.17), (0.47, 0.2)], [(0.47, 0.2), (0.44, 0.17), (0.48, 0.14), (0.49, 0.19)],
     [(0.44, 0.0), (0.55, 0.0), (0.54, 0.09), (0.47, 0.09)], [(0.48, 0.14), (0.47, 0.09), (0.54, 0.09), (0.52, 0.14)],
     [(0.46, 0.23), (0.42, 0.26), (0.37, 0.25), (0.43, 0.2)], [(0.46, 0.23), (0.47, 0.27), (0.44, 0.3), (0.42, 0.26)],
     [(0.44, 0.3), (0.33, 0.3), (0.37, 0.25), (0.42, 0.26)], [(0.54, 0.23), (0.55, 0.25), (0.55, 0.3), (0.51, 0.27)],
     [(0.53, 0.2), (0.57, 0.16), (0.58, 0.19), (0.54, 0.23)], [(0.53, 0.2), (0.51, 0.19), (0.52, 0.14), (0.57, 0.16)],
     [(0.55, 0.25), (0.54, 0.23), (0.58, 0.19), (0.61, 0.24)], [(0.69, 0.3), (0.55, 0.3), (0.55, 0.25), (0.61, 0.24)],
     [(0.22, 0.08), (0.22, 0.22), (0.11, 0.22), (0.11, 0.08)], [(1.0, 0.09), (1.0, 0.22), (0.85, 0.22), (0.85, 0.08)],
     [(0.33, 0.07), (0.32, 0.21), (0.22, 0.22), (0.22, 0.08)], [(0.11, 0.08), (0.11, 0.22), (0.0, 0.22), (0.0, 0.07)],
     [(0.85, 0.08), (0.85, 0.22), (0.7, 0.21), (0.71, 0.07)], [(0.22, 0.3), (0.22, 0.22), (0.32, 0.21), (0.33, 0.3)],
     [(0.11, 0.3), (0.11, 0.22), (0.22, 0.22), (0.22, 0.3)], [(0.0, 0.3), (0.0, 0.22), (0.11, 0.22), (0.11, 0.3)],
     [(0.85, 0.3), (0.85, 0.22), (1.0, 0.22), (1.0, 0.3)], [(0.69, 0.3), (0.7, 0.21), (0.85, 0.22), (0.85, 0.3)],
     [(0.37, 0.19), (0.44, 0.17), (0.43, 0.2), (0.37, 0.25)], [(0.37, 0.25), (0.33, 0.3), (0.32, 0.21), (0.37, 0.19)],
     [(0.44, 0.17), (0.37, 0.19), (0.37, 0.11), (0.43, 0.11)], [(0.48, 0.14), (0.44, 0.17), (0.43, 0.11), (0.47, 0.09)],
     [(0.43, 0.11), (0.37, 0.11), (0.33, 0.07), (0.41, 0.04)], [(0.47, 0.09), (0.43, 0.11), (0.41, 0.04), (0.44, 0.0)],
     [(0.33, 0.0), (0.44, 0.0), (0.41, 0.04), (0.33, 0.07)], [(0.85, 0.0), (0.85, 0.08), (0.71, 0.07), (0.69, 0.0)],
     [(0.11, 0.0), (0.11, 0.08), (0.0, 0.07), (0.0, 0.0)], [(0.33, 0.0), (0.33, 0.07), (0.22, 0.08), (0.22, 0.0)],
     [(1.0, 0.0), (1.0, 0.09), (0.85, 0.08), (0.85, 0.0)], [(0.22, 0.0), (0.22, 0.08), (0.11, 0.08), (0.11, 0.0)],
     [(0.32, 0.21), (0.33, 0.07), (0.37, 0.11), (0.37, 0.19)], [(0.59, 0.11), (0.57, 0.16), (0.52, 0.14), (0.54, 0.09)],
     [(0.59, 0.11), (0.54, 0.09), (0.55, 0.0), (0.62, 0.06)], [(0.69, 0.0), (0.71, 0.07), (0.62, 0.06), (0.55, 0.0)],
     [(0.59, 0.11), (0.62, 0.06), (0.71, 0.07), (0.65, 0.12)], [(0.7, 0.21), (0.64, 0.19), (0.65, 0.12), (0.71, 0.07)],
     [(0.61, 0.24), (0.64, 0.19), (0.7, 0.21), (0.69, 0.3)], [(0.57, 0.16), (0.64, 0.19), (0.61, 0.24), (0.58, 0.19)],
     [(0.57, 0.16), (0.59, 0.11), (0.65, 0.12), (0.64, 0.19)]],
    .300)

trunk4 = Split(
    [0, 1, 2, 3, 4, 5, 6, 7],
    ([8, 9, 10, 11, 12, 13, 14, 15],
     [16, 17, 18, 19, 20, 21, 22, 23]),
    [(0.39, 0.92, 0.0), (-0.38, 0.93, 0.0), (-0.92, 0.39, 0.0), (-0.93, -0.38, 0.0), (-0.39, -0.92, 0.0),
     (0.38, -0.93, 0.0), (0.92, -0.39, 0.0), (0.93, 0.38, 0.0), (0.24, 0.93, 1.83), (-0.53, 0.92, 1.83),
     (-1.06, 0.38, 1.83), (-1.06, -0.39, 1.83), (-0.51, -0.93, 1.83), (0.25, -0.92, 1.83), (0.79, -0.38, 1.83),
     (0.78, 0.39, 1.83), (1.54, 0.53, 1.45), (1.17, 0.53, 1.71), (0.91, 0.21, 1.89), (0.92, -0.24, 1.88),
     (1.18, -0.55, 1.7), (1.54, -0.55, 1.45), (1.8, -0.23, 1.27), (1.8, 0.21, 1.27), (1.39, 0.2, 0.88),
     (1.39, -0.19, 0.88), (1.2, -0.64, 1.11), (1.11, -0.6, 1.29), (1.17, 0.29, 0.53), (1.17, -0.29, 0.52),
     (0.84, -0.53, 1.69), (0.63, -0.82, 1.6), (0.99, 0.5, 1.68), (1.08, 0.69, 1.3), (1.17, 0.61, 1.07),
     (0.76, 0.85, 1.61), (0.31, 0.96, 1.32), (-0.45, 0.96, 1.32), (-1.0, 0.42, 1.32), (-1.0, -0.34, 1.32),
     (-0.46, -0.89, 1.32), (0.31, -0.89, 1.32), (0.68, -0.83, 1.22), (1.1, -0.63, 0.67), (0.66, -0.77, 0.67),
     (0.89, -0.69, 0.22), (0.35, -0.91, 0.46), (-0.95, -0.37, 0.46), (-0.41, -0.91, 0.46), (-0.41, 0.94, 0.46),
     (-0.95, 0.4, 0.46), (1.04, 0.59, 0.68), (0.36, 0.94, 0.46), (0.82, 0.73, 0.38), (0.65, 0.82, 0.74),
     (0.69, 0.87, 1.19), (-0.1, -0.05, 1.94), (-0.12, -0.05, 2.89), (1.33, -0.05, 1.48), (1.9, -0.05, 2.25),
     (-0.02, 0.0, 0.95), (0.57, 0.0, 0.77)],
    [(0.39, 0.92, 0.0), (-0.38, 0.93, 0.0), (-0.92, 0.39, 0.0), (-0.93, -0.38, 0.0), (-0.39, -0.92, 0.0),
     (0.38, -0.93, 0.0), (0.92, -0.39, 0.0), (0.92, 0.38, 0.0), (0.24, 0.93, 1.83), (-0.53, 0.92, 1.83),
     (-1.06, 0.38, 1.83), (-1.06, -0.39, 1.83), (-0.51, -0.93, 1.83), (0.25, -0.92, 1.83), (0.81, -0.38, 1.85),
     (0.8, 0.39, 1.85), (1.34, 0.53, 1.3), (1.15, 0.53, 1.68), (1.0, 0.21, 1.94), (1.0, -0.24, 1.93),
     (1.15, -0.55, 1.67), (1.34, -0.55, 1.29), (1.46, -0.23, 1.02), (1.46, 0.21, 1.02), (1.17, 0.2, 0.8),
     (1.17, -0.19, 0.8), (1.11, -0.64, 1.08), (1.02, -0.6, 1.27), (1.03, 0.29, 0.51), (1.03, -0.29, 0.51),
     (0.84, -0.53, 1.7), (0.63, -0.82, 1.6), (0.99, 0.5, 1.67), (1.03, 0.69, 1.29), (1.08, 0.61, 1.05),
     (0.76, 0.85, 1.61), (0.31, 0.96, 1.32), (-0.45, 0.96, 1.32), (-1.0, 0.42, 1.32), (-1.0, -0.34, 1.32),
     (-0.46, -0.89, 1.32), (0.31, -0.89, 1.32), (0.68, -0.83, 1.22), (1.02, -0.63, 0.67), (0.65, -0.77, 0.67),
     (0.88, -0.69, 0.22), (0.35, -0.91, 0.46), (-0.95, -0.37, 0.46), (-0.41, -0.91, 0.46), (-0.41, 0.94, 0.46),
     (-0.95, 0.4, 0.46), (0.95, 0.59, 0.68), (0.36, 0.94, 0.46), (0.81, 0.73, 0.38), (0.65, 0.82, 0.74),
     (0.69, 0.87, 1.19), (-0.13, -0.05, 1.94), (-0.1, -0.05, 2.89), (0.94, -0.05, 1.26), (2.19, -0.05, 1.53),
     (0.03, 0.0, 0.95), (1.25, 0.0, 0.27)],
    [(15, 14, 19, 18), (23, 22, 25, 24), (20, 27, 26, 21), (21, 26, 25, 22), (6, 7, 28, 29), (25, 29, 28, 24),
     (20, 30, 31, 27), (20, 19, 14, 30), (14, 13, 31, 30), (17, 32, 15, 18), (16, 34, 33, 17), (16, 23, 24, 34),
     (32, 17, 33, 35), (8, 15, 32, 35), (48, 40, 39, 47), (50, 38, 37, 49), (46, 41, 40, 48), (47, 39, 38, 50),
     (49, 37, 36, 52), (12, 40, 41, 13), (11, 39, 40, 12), (10, 38, 39, 11), (9, 37, 38, 10), (8, 36, 37, 9),
     (42, 26, 27, 31), (31, 13, 41, 42), (26, 42, 44, 43), (25, 26, 43, 29), (43, 44, 46, 45), (29, 43, 45, 6),
     (5, 6, 45, 46), (1, 49, 52, 0), (3, 47, 50, 2), (5, 46, 48, 4), (2, 50, 49, 1), (4, 48, 47, 3), (41, 46, 44, 42),
     (51, 34, 24, 28), (51, 28, 7, 53), (0, 52, 53, 7), (51, 53, 52, 54), (36, 55, 54, 52), (35, 55, 36, 8),
     (34, 55, 35, 33), (34, 51, 54, 55)],
    [[(0.53, 0.38), (0.42, 0.38), (0.45, 0.35), (0.49, 0.35)], [(0.5, 0.22), (0.47, 0.22), (0.47, 0.17), (0.51, 0.17)],
     [(0.44, 0.29), (0.42, 0.24), (0.42, 0.21), (0.45, 0.25)], [(0.45, 0.25), (0.42, 0.21), (0.47, 0.17), (0.47, 0.22)],
     [(0.42, 0.0), (0.53, 0.0), (0.52, 0.11), (0.45, 0.11)], [(0.47, 0.17), (0.45, 0.11), (0.52, 0.11), (0.51, 0.17)],
     [(0.44, 0.29), (0.41, 0.32), (0.36, 0.31), (0.42, 0.24)], [(0.44, 0.29), (0.45, 0.35), (0.42, 0.38), (0.41, 0.32)],
     [(0.42, 0.38), (0.32, 0.38), (0.36, 0.31), (0.41, 0.32)], [(0.52, 0.29), (0.53, 0.31), (0.53, 0.38), (0.49, 0.35)],
     [(0.52, 0.24), (0.55, 0.2), (0.56, 0.24), (0.52, 0.29)], [(0.52, 0.24), (0.5, 0.22), (0.51, 0.17), (0.55, 0.2)],
     [(0.53, 0.31), (0.52, 0.29), (0.56, 0.24), (0.6, 0.3)], [(0.67, 0.38), (0.53, 0.38), (0.53, 0.31), (0.6, 0.3)],
     [(0.22, 0.1), (0.21, 0.27), (0.11, 0.27), (0.11, 0.1)], [(1.0, 0.1), (1.0, 0.27), (0.83, 0.27), (0.83, 0.1)],
     [(0.32, 0.09), (0.32, 0.27), (0.21, 0.27), (0.22, 0.1)], [(0.11, 0.1), (0.11, 0.27), (0.0, 0.27), (0.0, 0.09)],
     [(0.83, 0.1), (0.83, 0.27), (0.68, 0.26), (0.69, 0.09)], [(0.22, 0.38), (0.21, 0.27), (0.32, 0.27), (0.32, 0.38)],
     [(0.11, 0.38), (0.11, 0.27), (0.21, 0.27), (0.22, 0.38)], [(0.0, 0.38), (0.0, 0.27), (0.11, 0.27), (0.11, 0.38)],
     [(0.83, 0.38), (0.83, 0.27), (1.0, 0.27), (1.0, 0.38)], [(0.67, 0.38), (0.68, 0.26), (0.83, 0.27), (0.83, 0.38)],
     [(0.36, 0.24), (0.42, 0.21), (0.42, 0.24), (0.36, 0.31)], [(0.36, 0.31), (0.32, 0.38), (0.32, 0.27), (0.36, 0.24)],
     [(0.42, 0.21), (0.36, 0.24), (0.36, 0.14), (0.42, 0.14)], [(0.47, 0.17), (0.42, 0.21), (0.42, 0.14), (0.45, 0.11)],
     [(0.42, 0.14), (0.36, 0.14), (0.32, 0.09), (0.39, 0.06)], [(0.45, 0.11), (0.42, 0.14), (0.39, 0.06), (0.42, 0.0)],
     [(0.32, 0.0), (0.42, 0.0), (0.39, 0.06), (0.32, 0.09)], [(0.83, 0.0), (0.83, 0.1), (0.69, 0.09), (0.67, 0.0)],
     [(0.11, 0.0), (0.11, 0.1), (0.0, 0.09), (0.0, 0.0)], [(0.32, 0.0), (0.32, 0.09), (0.22, 0.1), (0.22, 0.0)],
     [(1.0, 0.0), (1.0, 0.1), (0.83, 0.1), (0.83, 0.0)], [(0.22, 0.0), (0.22, 0.1), (0.11, 0.1), (0.11, 0.0)],
     [(0.32, 0.27), (0.32, 0.09), (0.36, 0.14), (0.36, 0.24)], [(0.57, 0.14), (0.55, 0.2), (0.51, 0.17), (0.52, 0.11)],
     [(0.57, 0.14), (0.52, 0.11), (0.53, 0.0), (0.6, 0.08)], [(0.67, 0.0), (0.69, 0.09), (0.6, 0.08), (0.53, 0.0)],
     [(0.57, 0.14), (0.6, 0.08), (0.69, 0.09), (0.64, 0.15)], [(0.68, 0.26), (0.62, 0.23), (0.64, 0.15), (0.69, 0.09)],
     [(0.6, 0.3), (0.62, 0.23), (0.68, 0.26), (0.67, 0.38)], [(0.55, 0.2), (0.62, 0.23), (0.6, 0.3), (0.56, 0.24)],
     [(0.55, 0.2), (0.57, 0.14), (0.64, 0.15), (0.62, 0.23)]],
    .375)

trunk5 = Split(
    [0, 1, 2, 3, 4, 5, 6, 7],
    ([8, 9, 10, 11, 12, 13, 14, 15],
     [16, 17, 18, 19, 20, 21, 22, 23]),
    [(0.39, 0.92, 0.0), (-0.38, 0.93, 0.0), (-0.92, 0.39, 0.0), (-0.93, -0.38, 0.0), (-0.39, -0.92, 0.0),
     (0.38, -0.93, 0.0), (0.92, -0.39, 0.0), (0.93, 0.38, 0.0), (0.26, 0.94, 1.85), (-0.53, 0.92, 1.83),
     (-1.06, 0.38, 1.83), (-1.06, -0.39, 1.83), (-0.51, -0.93, 1.83), (0.27, -0.94, 1.85), (0.8, -0.51, 2.01),
     (0.79, 0.53, 2.0), (1.87, 0.74, 1.51), (1.35, 0.74, 1.86), (0.99, 0.3, 2.11), (0.99, -0.33, 2.11),
     (1.36, -0.77, 1.86), (1.87, -0.76, 1.5), (2.23, -0.32, 1.25), (2.23, 0.3, 1.25), (1.63, 0.23, 0.74),
     (1.63, -0.22, 0.74), (1.28, -0.78, 1.05), (1.18, -0.75, 1.28), (1.33, 0.29, 0.46), (1.33, -0.29, 0.46),
     (0.85, -0.69, 1.79), (0.62, -0.95, 1.64), (1.08, 0.69, 1.8), (1.14, 0.85, 1.29), (1.24, 0.72, 1.01),
     (0.76, 1.02, 1.66), (0.32, 0.96, 1.32), (-0.45, 0.96, 1.32), (-1.0, 0.42, 1.32), (-1.0, -0.34, 1.32),
     (-0.46, -0.89, 1.32), (0.31, -0.89, 1.32), (0.67, -0.85, 1.22), (1.11, -0.65, 0.66), (0.66, -0.77, 0.67),
     (0.89, -0.69, 0.22), (0.35, -0.91, 0.46), (-0.95, -0.37, 0.46), (-0.41, -0.91, 0.46), (-0.41, 0.94, 0.46),
     (-0.95, 0.4, 0.46), (1.04, 0.6, 0.67), (0.36, 0.94, 0.46), (0.82, 0.73, 0.38), (0.65, 0.82, 0.74),
     (0.69, 0.89, 1.18), (-0.1, -0.05, 1.94), (-0.12, -0.05, 2.89), (1.33, -0.05, 1.48), (1.9, -0.05, 2.25),
     (-0.02, 0.0, 0.95), (0.57, 0.0, 0.77)],
    [(0.39, 0.92, 0.0), (-0.38, 0.93, 0.0), (-0.92, 0.39, 0.0), (-0.93, -0.38, 0.0), (-0.39, -0.92, 0.0),
     (0.38, -0.93, 0.0), (0.92, -0.39, 0.0), (0.92, 0.38, 0.0), (0.26, 0.94, 1.85), (-0.53, 0.92, 1.83),
     (-1.06, 0.38, 1.83), (-1.06, -0.39, 1.83), (-0.51, -0.93, 1.83), (0.27, -0.94, 1.85), (0.82, -0.51, 2.03),
     (0.81, 0.53, 2.02), (1.67, 0.74, 1.35), (1.33, 0.74, 1.83), (1.08, 0.3, 2.16), (1.08, -0.33, 2.16),
     (1.34, -0.77, 1.82), (1.67, -0.76, 1.34), (1.89, -0.32, 1.0), (1.89, 0.3, 1.0), (1.42, 0.23, 0.66),
     (1.41, -0.22, 0.66), (1.19, -0.78, 1.02), (1.09, -0.75, 1.25), (1.19, 0.29, 0.45), (1.19, -0.29, 0.45),
     (0.85, -0.69, 1.8), (0.62, -0.95, 1.64), (1.07, 0.69, 1.8), (1.09, 0.85, 1.28), (1.15, 0.72, 0.99),
     (0.76, 1.02, 1.66), (0.32, 0.96, 1.32), (-0.45, 0.96, 1.32), (-1.0, 0.42, 1.32), (-1.0, -0.34, 1.32),
     (-0.46, -0.89, 1.32), (0.31, -0.89, 1.32), (0.67, -0.85, 1.22), (1.03, -0.65, 0.65), (0.65, -0.77, 0.67),
     (0.88, -0.69, 0.22), (0.35, -0.91, 0.46), (-0.95, -0.37, 0.46), (-0.41, -0.91, 0.46), (-0.41, 0.94, 0.46),
     (-0.95, 0.4, 0.46), (0.96, 0.6, 0.67), (0.36, 0.94, 0.46), (0.81, 0.73, 0.38), (0.65, 0.82, 0.74),
     (0.69, 0.89, 1.18), (-0.13, -0.05, 1.94), (-0.1, -0.05, 2.89), (0.94, -0.05, 1.26), (2.19, -0.05, 1.53),
     (0.03, 0.0, 0.95), (1.25, 0.0, 0.27)],
    [(15, 14, 19, 18), (23, 22, 25, 24), (20, 27, 26, 21), (21, 26, 25, 22), (6, 7, 28, 29), (25, 29, 28, 24),
     (20, 30, 31, 27), (20, 19, 14, 30), (14, 13, 31, 30), (17, 32, 15, 18), (16, 34, 33, 17), (16, 23, 24, 34),
     (32, 17, 33, 35), (8, 15, 32, 35), (48, 40, 39, 47), (50, 38, 37, 49), (46, 41, 40, 48), (47, 39, 38, 50),
     (49, 37, 36, 52), (12, 40, 41, 13), (11, 39, 40, 12), (10, 38, 39, 11), (9, 37, 38, 10), (8, 36, 37, 9),
     (42, 26, 27, 31), (31, 13, 41, 42), (26, 42, 44, 43), (25, 26, 43, 29), (43, 44, 46, 45), (29, 43, 45, 6),
     (5, 6, 45, 46), (1, 49, 52, 0), (3, 47, 50, 2), (5, 46, 48, 4), (2, 50, 49, 1), (4, 48, 47, 3), (41, 46, 44, 42),
     (51, 34, 24, 28), (51, 28, 7, 53), (0, 52, 53, 7), (51, 53, 52, 54), (36, 55, 54, 52), (35, 55, 36, 8),
     (34, 55, 35, 33), (34, 51, 54, 55)],
    [[(0.58, 0.28), (0.44, 0.28), (0.46, 0.26), (0.54, 0.26)], [(0.53, 0.22), (0.45, 0.23), (0.46, 0.12), (0.52, 0.12)],
     [(0.29, 0.19), (0.33, 0.12), (0.36, 0.11), (0.37, 0.21)], [(0.37, 0.21), (0.36, 0.11), (0.46, 0.12), (0.45, 0.23)],
     [(0.44, 0.0), (0.58, 0.0), (0.57, 0.07), (0.5, 0.08)], [(0.46, 0.12), (0.45, 0.06), (0.53, 0.06), (0.52, 0.12)],
     [(0.29, 0.19), (0.25, 0.13), (0.24, 0.08), (0.33, 0.12)], [(0.45, 0.22), (0.46, 0.26), (0.44, 0.28), (0.41, 0.24)],
     [(0.44, 0.28), (0.34, 0.28), (0.37, 0.23), (0.41, 0.24)], [(0.58, 0.24), (0.58, 0.23), (0.58, 0.28), (0.54, 0.26)],
     [(0.62, 0.21), (0.62, 0.1), (0.66, 0.11), (0.7, 0.18)], [(0.62, 0.21), (0.53, 0.22), (0.52, 0.12), (0.62, 0.1)],
     [(0.72, 0.15), (0.7, 0.18), (0.66, 0.11), (0.73, 0.09)], [(0.72, 0.28), (0.58, 0.28), (0.58, 0.23), (0.65, 0.22)],
     [(0.22, 0.07), (0.22, 0.17), (0.11, 0.17), (0.11, 0.06)], [(1.0, 0.07), (1.0, 0.17), (0.87, 0.17), (0.87, 0.07)],
     [(0.34, 0.07), (0.33, 0.17), (0.22, 0.17), (0.22, 0.07)], [(0.11, 0.06), (0.11, 0.17), (0.0, 0.17), (0.0, 0.03)],
     [(0.87, 0.07), (0.87, 0.17), (0.74, 0.17), (0.75, 0.07)], [(0.22, 0.28), (0.22, 0.17), (0.33, 0.17), (0.34, 0.28)],
     [(0.11, 0.28), (0.11, 0.17), (0.22, 0.17), (0.22, 0.28)], [(0.0, 0.28), (0.0, 0.17), (0.11, 0.17), (0.11, 0.28)],
     [(0.87, 0.28), (0.87, 0.17), (1.0, 0.17), (1.0, 0.28)], [(0.72, 0.28), (0.74, 0.17), (0.87, 0.17), (0.87, 0.28)],
     [(0.29, 0.06), (0.36, 0.11), (0.33, 0.12), (0.24, 0.08)], [(0.37, 0.23), (0.34, 0.28), (0.33, 0.17), (0.38, 0.17)],
     [(0.36, 0.11), (0.29, 0.06), (0.35, 0.01), (0.39, 0.06)], [(0.46, 0.12), (0.36, 0.11), (0.39, 0.06), (0.45, 0.06)],
     [(0.45, 0.1), (0.39, 0.1), (0.34, 0.07), (0.43, 0.04)], [(0.5, 0.08), (0.45, 0.1), (0.43, 0.04), (0.44, 0.0)],
     [(0.34, 0.0), (0.44, 0.0), (0.43, 0.04), (0.34, 0.07)], [(0.87, 0.0), (0.87, 0.07), (0.75, 0.07), (0.72, 0.0)],
     [(0.11, 0.0), (0.11, 0.06), (0.0, 0.03), (0.0, 0.0)], [(0.34, 0.0), (0.34, 0.07), (0.22, 0.07), (0.22, 0.0)],
     [(1.0, 0.0), (1.0, 0.07), (0.87, 0.07), (0.87, 0.0)], [(0.22, 0.0), (0.22, 0.07), (0.11, 0.06), (0.11, 0.0)],
     [(0.33, 0.17), (0.34, 0.07), (0.39, 0.1), (0.38, 0.17)], [(0.59, 0.05), (0.62, 0.1), (0.52, 0.12), (0.53, 0.06)],
     [(0.62, 0.1), (0.57, 0.07), (0.58, 0.0), (0.66, 0.06)], [(0.72, 0.0), (0.75, 0.07), (0.66, 0.06), (0.58, 0.0)],
     [(0.62, 0.1), (0.66, 0.06), (0.75, 0.07), (0.69, 0.11)], [(0.74, 0.17), (0.67, 0.17), (0.69, 0.11), (0.75, 0.07)],
     [(0.65, 0.22), (0.67, 0.17), (0.74, 0.17), (0.72, 0.28)], [(0.62, 0.1), (0.68, 0.05), (0.73, 0.09), (0.66, 0.11)],
     [(0.62, 0.1), (0.59, 0.05), (0.64, 0.01), (0.68, 0.05)]],
    .278)


Trunks = [trunk, trunk2, trunk3, trunk4, trunk5]
Joncts = [S1, S2, S3, S4, trunk, trunk2, trunk5]


class RootBase:
    """This is used to represent the base of a trunk with roots"""
    def __init__(self, roots, verts, faces, uv):
        """Initializes the variables

        Args:
            roots - (list of (Vector, list of int)) The directions and indexes of roots exits
            verts - (list of Vector) The vertices
            faces - (list of (int, int, int, int)) The faces
            uv - (list of list of(int, int)) The uvs
        """
        self.roots = roots
        self.verts = verts
        self.faces = faces
        self.uv = uv

R1 = RootBase(
    [((0.92, -0.09, -0.38), [25, 24, 31, 30, 29, 28, 27, 26]),
     ((0.84, 0.52, -0.19), [33, 32, 39, 38, 37, 36, 35, 34]),
     ((-0.06, 0.99, -0.12), [41, 40, 47, 46, 45, 44, 43, 42]),
     ((-0.5, 0.73, -0.47), [49, 48, 55, 54, 53, 52, 51, 50]),
     ((-0.91, 0.1, -0.41), [57, 56, 63, 62, 61, 60, 59, 58]),
     ((-0.86, -0.5, -0.11), [65, 64, 71, 70, 69, 68, 67, 66]),
     ((-0.26, -0.6, -0.76), [9, 8, 15, 14, 13, 12, 11, 10]),
     ((0.39, -0.68, -0.61), [17, 16, 23, 22, 21, 20, 19, 18])],
    [(0.0, 1.416882872581482, -0.3086543381214142),(-1.0018874406814575, 1.0018874406814575, -0.3086543381214142),
     (-1.416882872581482, -6.19339104446226e-08, -0.3086543381214142),
     (-1.0018874406814575, -1.0018874406814575, -0.3086543381214142),
     (1.238678208892452e-07, -1.416882872581482, -0.3086543381214142),
     (1.001887559890747, -1.0018872022628784, -0.3086543381214142),
     (1.416882872581482, 1.6896155585754968e-08, -0.3086543381214142),
     (1.001887559890747, 1.001887321472168, -0.3086543381214142), (-0.33, -1.27, -1.71), (-0.69, -1.31, -1.54),
     (-0.87, -1.56, -1.34), (-0.76, -1.89, -1.07), (-0.32, -2.13, -1.04), (0.05, -2.04, -1.23), (0.18, -1.78, -1.49),
     (0.05, -1.49, -1.68), (0.6, -1.33, -1.59), (0.48, -1.49, -1.53), (0.48, -1.61, -1.4), (0.61, -1.66, -1.24),
     (0.81, -1.59, -1.19), (0.94, -1.45, -1.28), (0.92, -1.32, -1.43), (0.79, -1.29, -1.56), (1.61, -0.2, -1.54),
     (1.57, -0.69, -1.4), (1.76, -0.9, -1.04), (1.86, -0.79, -0.69), (2.0, -0.44, -0.48), (2.0, 0.01, -0.59),
     (1.91, 0.24, -0.92), (1.71, 0.18, -1.28), (1.52, 1.25, -1.25), (1.66, 1.02, -1.25), (1.77, 0.89, -1.08),
     (1.82, 0.91, -0.85), (1.76, 1.06, -0.66), (1.62, 1.31, -0.65), (1.49, 1.45, -0.84), (1.45, 1.42, -1.07),
     (-0.21, 2.19, -1.32), (0.1, 2.2, -1.5), (0.45, 2.23, -1.37), (0.57, 2.28, -1.08), (0.47, 2.3, -0.8),
     (0.16, 2.29, -0.64), (-0.17, 2.27, -0.77), (-0.29, 2.23, -1.05), (-1.31, 1.13, -1.27), (-1.16, 1.16, -1.39),
     (-0.97, 1.29, -1.38), (-0.89, 1.43, -1.23), (-0.95, 1.52, -1.06), (-1.13, 1.48, -0.91), (-1.32, 1.33, -0.93),
     (-1.39, 1.2, -1.09), (-1.98, -0.21, -1.12), (-1.82, -0.09, -1.39), (-1.71, 0.24, -1.49), (-1.78, 0.58, -1.36),
     (-1.9, 0.69, -1.08), (-2.02, 0.57, -0.79), (-2.08, 0.2, -0.66), (-2.09, -0.1, -0.84), (-1.32, -1.66, -0.81),
     (-1.33, -1.57, -1.08), (-1.43, -1.3, -1.25), (-1.62, -1.03, -1.16), (-1.73, -0.92, -0.87), (-1.73, -1.02, -0.58),
     (-1.55, -1.26, -0.41), (-1.39, -1.56, -0.54), (-1.6, -0.39, -0.91), (-1.61, 0.58, -0.56), (-1.66, -0.34, -0.54),
     (-1.53, -0.66, -0.85), (-1.51, -0.74, -0.46), (-0.96, -1.48, -0.53), (-1.37, -0.24, -1.23), (-1.23, 0.26, -1.32),
     (-1.46, 0.64, -1.26), (-1.6, 0.75, -0.94), (-1.06, -1.18, -1.28), (-1.32, -0.77, -1.22), (-0.99, -1.63, -0.82),
     (-1.02, -1.56, -1.1), (-0.61, -1.78, -0.8), (-0.2, -1.98, -0.79), (0.21, -1.85, -0.98), (-0.41, -1.62, -0.51),
     (-0.1, -1.75, -0.57), (0.24, -1.73, -0.68), (0.54, -1.57, -1.0), (0.81, -1.41, -0.92), (0.98, -1.23, -1.0),
     (0.97, -1.02, -1.22), (0.51, -1.46, -0.62), (0.83, -1.23, -0.6), (1.08, -1.11, -0.68), (1.22, -1.06, -0.87),
     (0.26, -1.34, -1.5), (0.35, -1.61, -1.31), (0.5, -1.06, -1.45), (0.72, -0.98, -1.45), (0.26, -0.6, -1.38),
     (0.65, -0.58, -1.43), (1.45, -0.93, -0.49), (1.66, -0.38, -0.4), (1.7, 0.18, -0.5), (1.64, 0.44, -0.85),
     (1.25, 0.34, -1.23), (1.15, -0.16, -1.53), (1.1, -0.68, -1.29), (1.45, -0.98, -0.88), (1.57, 0.81, -0.55),
     (1.31, 1.2, -0.51), (1.2, 1.38, -0.78), (1.12, 1.28, -1.06), (1.5, 0.7, -1.14), (1.65, 0.72, -0.84),
     (1.21, 1.11, -1.27), (1.38, 0.87, -1.33), (0.55, 1.94, -0.68), (0.16, 1.91, -0.56), (0.71, 1.52, -0.52),
     (0.45, 1.86, -1.29), (0.66, 1.95, -0.99), (0.67, 1.3, -1.11), (0.86, 1.55, -0.82), (-0.19, 1.94, -0.7),
     (-0.34, 1.92, -0.99), (-0.32, 1.6, -0.61), (-0.42, 1.63, -0.93), (-0.26, 1.84, -1.24), (0.06, 1.86, -1.44),
     (-0.3, 1.33, -1.09), (0.16, 1.3, -1.27), (-0.68, 1.48, -0.89), (-0.95, 1.43, -0.73), (-1.23, 1.21, -0.73),
     (-0.53, 1.49, -0.61), (-0.61, 1.43, -0.45), (-0.99, 1.24, -0.44), (-1.19, 0.95, -1.21), (-1.33, 1.05, -1.0),
     (-0.99, 0.92, -1.31), (-0.72, 1.01, -1.29), (-0.59, 1.2, -1.09), (-0.1, -0.99, -1.54), (-0.65, -0.87, -1.38),
     (0.7, -0.11, -1.52), (-0.98, -0.62, -1.28), (-0.93, -0.25, -1.19), (-0.76, 0.16, -1.2), (-1.33, 0.94, -0.59),
     (-1.4, 0.89, -0.93), (-1.25, 0.79, -1.2), (-0.95, 0.6, -1.26), (-0.49, 0.52, -1.16), (-0.06, 0.82, -0.96),
     (-0.28, 0.73, -0.96), (0.39, -1.68, -0.85), (0.37, -1.61, -0.62), (0.77, 0.96, -1.26), (1.06, 0.67, -1.36),
     (0.31, 0.91, -1.17), (-0.16, 0.21, -1.04), (-0.06, 0.41, -0.94), (0.11, 0.16, -1.15), (0.14, 0.42, -1.07),
     (0.62, 0.69, -1.36), (0.39, 0.48, -1.26), (0.73, 0.3, -1.31), (0.78, 0.56, -1.4), (0.27, -0.0, -1.35),
     (-0.42, -0.44, -1.24), (-0.28, -0.02, -1.2), (1.54, 0.27, -0.37), (1.36, 0.77, -0.39), (0.06, -1.64, -0.46)],
    [(63, 56, 72, 74), (62, 63, 74, 2), (61, 62, 2, 73), (70, 71, 77, 3), (69, 70, 3, 76), (68, 69, 76, 75),
     (57, 58, 79, 78), (57, 78, 72, 56), (59, 60, 81, 80), (59, 80, 79, 58), (60, 61, 73, 81), (72, 75, 76, 74),
     (66, 67, 83, 82), (67, 68, 75, 83), (64, 65, 85, 84), (64, 84, 77, 71), (65, 66, 82, 85), (12, 13, 88, 87),
     (11, 12, 87, 86), (87, 88, 91, 90), (86, 87, 90, 89), (85, 11, 86, 84), (84, 86, 89, 77), (21, 22, 95, 94),
     (20, 21, 94, 93), (19, 20, 93, 92), (94, 95, 99, 98), (93, 94, 98, 97), (92, 93, 97, 96), (161, 92, 96, 162),
     (17, 18, 101, 100), (23, 16, 102, 103), (103, 102, 104, 105), (16, 17, 100, 102), (28, 29, 108, 107),
     (27, 28, 107, 106), (30, 31, 110, 109), (30, 109, 108, 29), (24, 25, 112, 111), (24, 111, 110, 31),
     (113, 112, 25, 26), (26, 27, 106, 113), (38, 39, 117, 116), (37, 38, 116, 115), (36, 37, 115, 114),
     (34, 35, 119, 118), (35, 36, 114, 119), (32, 33, 121, 120), (33, 34, 118, 121), (32, 120, 117, 39),
     (44, 45, 123, 122), (122, 123, 0, 124), (42, 43, 126, 125), (125, 126, 128, 127), (43, 44, 122, 126),
     (124, 128, 126, 122), (46, 47, 130, 129), (129, 130, 132, 131), (46, 129, 123, 45), (40, 41, 134, 133),
     (133, 134, 136, 135), (41, 42, 125, 134), (127, 136, 134, 125), (40, 133, 130, 47), (130, 133, 135, 132),
     (23, 103, 95, 22), (53, 54, 139, 138), (52, 53, 138, 137), (138, 139, 142, 141), (137, 138, 141, 140),
     (55, 48, 143, 144), (55, 144, 139, 54), (49, 50, 146, 145), (49, 145, 143, 48), (147, 146, 50, 51),
     (51, 52, 137, 147), (15, 100, 101, 14), (8, 9, 149, 148), (8, 148, 100, 15), (99, 113, 106, 98),
     (99, 95, 112, 113), (105, 112, 95, 103), (111, 112, 105, 150), (104, 102, 100, 148), (11, 85, 82, 10),
     (10, 82, 149, 9), (151, 149, 82, 83), (78, 83, 75, 72), (78, 79, 153, 152), (83, 78, 152, 151),
     (81, 73, 154, 155), (156, 155, 144, 143), (80, 81, 155, 156), (157, 79, 80, 156), (145, 157, 156, 143),
     (153, 79, 157, 158), (132, 137, 140, 131), (135, 147, 137, 132), (147, 135, 159, 160), (158, 146, 147, 160),
     (146, 158, 157, 145), (14, 101, 88, 13), (88, 161, 162, 91), (92, 161, 88, 101), (18, 19, 92, 101),
     (110, 118, 119, 109), (117, 127, 128, 116), (120, 121, 164, 163), (120, 163, 127, 117), (121, 118, 110, 164),
     (165, 159, 135, 136), (136, 127, 163, 165), (158, 160, 167, 166), (166, 167, 169, 168), (159, 169, 167, 160),
     (165, 163, 170, 171), (165, 171, 169, 159), (164, 110, 172, 173), (164, 173, 170, 163), (110, 111, 150, 172),
     (170, 173, 172, 171), (174, 171, 172, 150), (168, 169, 171, 174), (152, 153, 176, 175), (153, 158, 166, 176),
     (151, 152, 175, 149), (149, 175, 104, 148), (104, 174, 150, 105), (166, 168, 174, 176), (176, 174, 104, 175),
     (3, 2, 74, 76), (1, 154, 73, 2), (144, 155, 154, 139), (139, 154, 1, 142), (0, 141, 142, 1), (141, 0, 131, 140),
     (131, 0, 123, 129), (116, 128, 124, 115), (0, 7, 115, 124), (109, 119, 114, 108), (7, 6, 177, 178),
     (115, 7, 178, 114), (108, 114, 178, 177), (108, 177, 6, 107), (5, 106, 107, 6), (98, 106, 5, 97), (4, 96, 97, 5),
     (90, 91, 162, 179), (162, 96, 4, 179), (4, 3, 77, 89), (90, 179, 4, 89)],
    [[(0.93, 0.77), (0.88, 0.78), (0.87, 0.7), (0.93, 0.68)], [(0.98, 0.78), (0.93, 0.77), (0.93, 0.68), (0.98, 0.64)],
     [(0.52, 0.35), (0.56, 0.3), (0.68, 0.33), (0.58, 0.39)], [(0.19, 0.84), (0.23, 0.85), (0.24, 0.93), (0.18, 0.93)],
     [(0.18, 0.73), (0.19, 0.67), (0.28, 0.66), (0.23, 0.75)], [(0.21, 0.76), (0.18, 0.73), (0.23, 0.75), (0.25, 0.78)],
     [(0.4, 0.3), (0.44, 0.35), (0.39, 0.41), (0.33, 0.34)], [(0.56, 0.65), (0.61, 0.71), (0.56, 0.72), (0.52, 0.66)],
     [(0.49, 0.37), (0.51, 0.36), (0.49, 0.41), (0.46, 0.42)], [(0.49, 0.37), (0.46, 0.42), (0.39, 0.41), (0.44, 0.35)],
     [(0.51, 0.4), (0.52, 0.35), (0.58, 0.39), (0.54, 0.43)], [(0.87, 0.7), (0.85, 0.66), (0.89, 0.62), (0.93, 0.68)],
     [(0.52, 0.86), (0.51, 0.81), (0.58, 0.79), (0.59, 0.87)], [(0.51, 0.81), (0.5, 0.79), (0.55, 0.76), (0.58, 0.79)],
     [(0.45, 0.93), (0.46, 0.97), (0.42, 0.97), (0.4, 0.92)], [(0.45, 0.93), (0.4, 0.92), (0.41, 0.87), (0.46, 0.89)],
     [(0.69, 0.92), (0.68, 0.87), (0.74, 0.85), (0.74, 0.92)], [(0.77, 0.84), (0.73, 0.85), (0.73, 0.8), (0.77, 0.79)],
     [(0.85, 0.85), (0.77, 0.84), (0.77, 0.79), (0.84, 0.8)], [(0.77, 0.79), (0.73, 0.8), (0.74, 0.74), (0.78, 0.73)],
     [(0.84, 0.8), (0.77, 0.79), (0.78, 0.73), (0.84, 0.74)], [(0.42, 0.97), (0.35, 0.97), (0.34, 0.92), (0.4, 0.92)],
     [(0.4, 0.92), (0.34, 0.92), (0.32, 0.86), (0.41, 0.87)], [(0.0, 0.69), (0.02, 0.7), (0.06, 0.73), (0.02, 0.71)],
     [(0.5, 0.28), (0.5, 0.25), (0.51, 0.24), (0.51, 0.28)], [(0.69, 0.82), (0.68, 0.8), (0.7, 0.75), (0.71, 0.78)],
     [(0.02, 0.71), (0.06, 0.73), (0.02, 0.76), (0.03, 0.73)], [(0.92, 0.62), (0.91, 0.62), (0.91, 0.56), (0.93, 0.56)],
     [(0.71, 0.78), (0.7, 0.75), (0.71, 0.69), (0.73, 0.71)], [(0.72, 0.76), (0.71, 0.78), (0.73, 0.71), (0.73, 0.72)],
     [(0.05, 0.62), (0.03, 0.61), (0.04, 0.59), (0.09, 0.6)], [(0.04, 0.69), (0.05, 0.66), (0.1, 0.67), (0.09, 0.71)],
     [(0.09, 0.71), (0.1, 0.67), (0.18, 0.67), (0.15, 0.73)], [(0.07, 0.66), (0.05, 0.62), (0.09, 0.6), (0.11, 0.66)],
     [(0.8, 0.29), (0.77, 0.22), (0.81, 0.18), (0.85, 0.26)], [(0.85, 0.83), (0.85, 0.79), (0.91, 0.81), (0.91, 0.89)],
     [(0.68, 0.43), (0.71, 0.44), (0.78, 0.48), (0.72, 0.47)], [(0.75, 0.16), (0.78, 0.12), (0.81, 0.18), (0.77, 0.22)],
     [(0.74, 0.38), (0.76, 0.3), (0.84, 0.31), (0.81, 0.4)], [(0.74, 0.38), (0.81, 0.4), (0.78, 0.48), (0.71, 0.44)],
     [(0.01, 0.8), (0.09, 0.79), (0.05, 0.86), (0.0, 0.86)], [(0.85, 0.58), (0.84, 0.52), (0.88, 0.51), (0.88, 0.57)],
     [(0.49, 0.04), (0.5, 0.05), (0.45, 0.07), (0.45, 0.07)], [(0.47, 0.0), (0.49, 0.04), (0.45, 0.07), (0.42, 0.03)],
     [(0.74, 0.05), (0.74, 0.0), (0.8, 0.0), (0.78, 0.07)], [(0.68, 0.55), (0.68, 0.55), (0.71, 0.52), (0.73, 0.53)],
     [(0.72, 0.07), (0.74, 0.05), (0.78, 0.07), (0.76, 0.08)], [(0.71, 0.62), (0.69, 0.58), (0.74, 0.56), (0.76, 0.61)],
     [(0.69, 0.58), (0.68, 0.55), (0.73, 0.53), (0.74, 0.56)], [(0.5, 0.8), (0.44, 0.8), (0.44, 0.77), (0.5, 0.77)],
     [(0.47, 0.26), (0.42, 0.3), (0.38, 0.25), (0.43, 0.21)], [(0.43, 0.21), (0.38, 0.25), (0.29, 0.21), (0.39, 0.14)],
     [(0.38, 0.58), (0.4, 0.58), (0.4, 0.64), (0.36, 0.64)], [(0.36, 0.64), (0.4, 0.64), (0.4, 0.72), (0.37, 0.75)],
     [(0.5, 0.26), (0.47, 0.26), (0.43, 0.21), (0.47, 0.21)], [(0.39, 0.14), (0.43, 0.13), (0.47, 0.21), (0.43, 0.21)],
     [(0.23, 0.5), (0.23, 0.45), (0.26, 0.45), (0.26, 0.51)], [(0.26, 0.51), (0.26, 0.45), (0.28, 0.45), (0.28, 0.5)],
     [(0.84, 0.43), (0.9, 0.44), (0.9, 0.5), (0.84, 0.48)], [(0.68, 0.0), (0.72, 0.02), (0.69, 0.07), (0.64, 0.05)],
     [(0.64, 0.05), (0.69, 0.07), (0.67, 0.17), (0.6, 0.13)], [(0.33, 0.56), (0.38, 0.58), (0.36, 0.64), (0.3, 0.61)],
     [(0.37, 0.75), (0.29, 0.71), (0.3, 0.61), (0.36, 0.64)], [(0.25, 0.41), (0.28, 0.41), (0.26, 0.45), (0.23, 0.45)],
     [(0.63, 0.04), (0.64, 0.05), (0.6, 0.13), (0.6, 0.08)], [(0.04, 0.69), (0.09, 0.71), (0.06, 0.73), (0.02, 0.7)],
     [(0.51, 0.56), (0.51, 0.52), (0.54, 0.51), (0.55, 0.56)], [(0.95, 0.33), (0.97, 0.3), (0.99, 0.33), (0.96, 0.37)],
     [(0.55, 0.56), (0.54, 0.51), (0.58, 0.52), (0.6, 0.58)], [(0.96, 0.37), (0.99, 0.33), (1.0, 0.38), (0.98, 0.39)],
     [(0.23, 0.54), (0.24, 0.51), (0.28, 0.51), (0.25, 0.54)], [(0.23, 0.54), (0.25, 0.54), (0.26, 0.6), (0.23, 0.57)],
     [(0.5, 0.52), (0.5, 0.56), (0.43, 0.56), (0.45, 0.51)], [(0.5, 0.52), (0.45, 0.51), (0.47, 0.49), (0.51, 0.49)],
     [(0.54, 0.13), (0.51, 0.14), (0.5, 0.08), (0.52, 0.07)], [(0.52, 0.07), (0.51, 0.05), (0.55, 0.08), (0.54, 0.13)],
     [(0.09, 0.56), (0.09, 0.6), (0.04, 0.59), (0.03, 0.55)], [(0.15, 0.52), (0.17, 0.46), (0.23, 0.5), (0.17, 0.58)],
     [(0.15, 0.52), (0.17, 0.58), (0.09, 0.6), (0.09, 0.56)], [(0.9, 0.58), (0.88, 0.57), (0.88, 0.51), (0.91, 0.56)],
     [(0.02, 0.76), (0.06, 0.73), (0.09, 0.79), (0.01, 0.8)], [(0.15, 0.73), (0.09, 0.79), (0.06, 0.73), (0.09, 0.71)],
     [(0.2, 0.03), (0.29, 0.06), (0.25, 0.13), (0.17, 0.11)], [(0.2, 0.66), (0.11, 0.66), (0.09, 0.6), (0.17, 0.58)],
     [(0.35, 0.97), (0.42, 0.97), (0.46, 0.98), (0.4, 1.0)], [(0.15, 0.41), (0.22, 0.41), (0.23, 0.5), (0.17, 0.46)],
     [(0.64, 0.79), (0.68, 0.86), (0.59, 0.87), (0.58, 0.79)], [(0.61, 0.71), (0.58, 0.79), (0.55, 0.76), (0.56, 0.72)],
     [(0.33, 0.34), (0.39, 0.41), (0.32, 0.46), (0.29, 0.4)], [(0.58, 0.79), (0.61, 0.71), (0.68, 0.74), (0.64, 0.79)],
     [(0.54, 0.43), (0.58, 0.39), (0.57, 0.46), (0.55, 0.47)], [(0.46, 0.46), (0.48, 0.45), (0.5, 0.48), (0.47, 0.49)],
     [(0.46, 0.42), (0.49, 0.41), (0.48, 0.45), (0.46, 0.46)], [(0.4, 0.49), (0.39, 0.41), (0.46, 0.42), (0.46, 0.46)],
     [(0.45, 0.51), (0.4, 0.49), (0.46, 0.46), (0.47, 0.49)], [(0.32, 0.46), (0.39, 0.41), (0.4, 0.49), (0.34, 0.54)],
     [(0.93, 0.41), (0.96, 0.37), (0.98, 0.39), (0.96, 0.43)], [(0.6, 0.13), (0.54, 0.13), (0.55, 0.08), (0.6, 0.08)],
     [(0.54, 0.13), (0.6, 0.13), (0.59, 0.23), (0.55, 0.23)], [(0.51, 0.24), (0.51, 0.14), (0.54, 0.13), (0.55, 0.23)],
     [(0.43, 0.56), (0.34, 0.54), (0.4, 0.49), (0.45, 0.51)], [(0.03, 0.55), (0.04, 0.59), (0.01, 0.54), (0.0, 0.51)],
     [(0.73, 0.8), (0.72, 0.76), (0.73, 0.72), (0.74, 0.74)], [(0.03, 0.62), (0.02, 0.58), (0.01, 0.54), (0.04, 0.59)],
     [(0.71, 0.85), (0.69, 0.82), (0.71, 0.78), (0.73, 0.84)], [(0.78, 0.48), (0.73, 0.53), (0.71, 0.52), (0.72, 0.47)],
     [(0.44, 0.77), (0.37, 0.75), (0.4, 0.72), (0.45, 0.77)], [(0.76, 0.61), (0.74, 0.56), (0.8, 0.54), (0.84, 0.6)],
     [(0.44, 0.8), (0.37, 0.8), (0.37, 0.75), (0.44, 0.77)], [(0.74, 0.56), (0.73, 0.53), (0.78, 0.48), (0.8, 0.54)],
     [(0.66, 0.24), (0.59, 0.23), (0.6, 0.13), (0.67, 0.17)], [(0.29, 0.71), (0.37, 0.75), (0.37, 0.8), (0.29, 0.79)],
     [(0.03, 0.29), (0.01, 0.25), (0.07, 0.22), (0.1, 0.24)], [(0.1, 0.24), (0.07, 0.22), (0.07, 0.18), (0.11, 0.2)],
     [(0.0, 0.21), (0.07, 0.18), (0.07, 0.22), (0.01, 0.25)], [(0.0, 0.14), (0.01, 0.06), (0.04, 0.09), (0.07, 0.14)],
     [(0.0, 0.14), (0.07, 0.14), (0.07, 0.18), (0.0, 0.21)], [(0.06, 0.02), (0.13, 0.0), (0.11, 0.09), (0.07, 0.07)],
     [(0.06, 0.02), (0.07, 0.07), (0.04, 0.09), (0.01, 0.06)], [(0.13, 0.0), (0.2, 0.03), (0.17, 0.11), (0.11, 0.09)],
     [(0.04, 0.09), (0.07, 0.07), (0.11, 0.09), (0.07, 0.14)], [(0.14, 0.18), (0.07, 0.14), (0.11, 0.09), (0.17, 0.11)],
     [(0.11, 0.2), (0.07, 0.18), (0.07, 0.14), (0.14, 0.18)], [(0.14, 0.39), (0.08, 0.34), (0.13, 0.27), (0.19, 0.31)],
     [(0.08, 0.34), (0.03, 0.29), (0.1, 0.24), (0.13, 0.27)], [(0.2, 0.41), (0.14, 0.39), (0.19, 0.31), (0.25, 0.36)],
     [(0.25, 0.36), (0.19, 0.31), (0.24, 0.2), (0.29, 0.27)], [(0.24, 0.2), (0.14, 0.18), (0.17, 0.11), (0.25, 0.13)],
     [(0.1, 0.24), (0.11, 0.2), (0.14, 0.18), (0.13, 0.27)], [(0.13, 0.27), (0.14, 0.18), (0.24, 0.2), (0.19, 0.31)],
     [(0.28, 0.66), (0.28, 0.84), (0.23, 0.82), (0.23, 0.75)], [(0.61, 0.48), (0.57, 0.46), (0.58, 0.39), (0.68, 0.33)],
     [(0.25, 0.54), (0.26, 0.54), (0.28, 0.6), (0.26, 0.6)], [(0.54, 0.51), (0.57, 0.46), (0.61, 0.48), (0.58, 0.52)],
     [(0.68, 0.65), (0.6, 0.58), (0.58, 0.52), (0.61, 0.48)], [(1.0, 0.38), (1.0, 0.48), (0.96, 0.43), (0.98, 0.39)],
     [(0.96, 0.43), (1.0, 0.48), (0.9, 0.5), (0.9, 0.44)], [(0.45, 0.07), (0.43, 0.13), (0.39, 0.14), (0.42, 0.03)],
     [(0.29, 0.21), (0.35, 0.04), (0.42, 0.03), (0.39, 0.14)], [(0.78, 0.12), (0.76, 0.08), (0.78, 0.07), (0.81, 0.18)],
     [(0.87, 0.02), (0.87, 0.19), (0.83, 0.16), (0.83, 0.07)], [(0.8, 0.0), (0.87, 0.02), (0.83, 0.07), (0.78, 0.07)],
     [(0.81, 0.18), (0.78, 0.07), (0.83, 0.07), (0.83, 0.16)], [(0.81, 0.18), (0.83, 0.16), (0.87, 0.19), (0.85, 0.26)],
     [(0.97, 0.94), (0.91, 0.89), (0.91, 0.81), (0.97, 0.78)], [(0.91, 0.56), (0.88, 0.51), (0.93, 0.5), (0.93, 0.56)],
     [(0.8, 0.68), (0.73, 0.71), (0.71, 0.69), (0.72, 0.62)], [(0.78, 0.73), (0.74, 0.74), (0.73, 0.72), (0.77, 0.71)],
     [(0.47, 0.83), (0.49, 0.8), (0.49, 0.9), (0.46, 0.89)], [(0.29, 0.8), (0.46, 0.81), (0.41, 0.87), (0.32, 0.86)],
     [(0.78, 0.73), (0.77, 0.71), (0.8, 0.68), (0.84, 0.74)]]
    )


# R1 = Trunk(
#     # roots
#     [(Vector((-6.293336696217011e-08, -0.6988458633422852, -0.3152722477912903)), 0.69, [110, 111, 112, 113, 114, 115, 116, 117]),
#      (Vector((0.6009913086891174, -0.04263520613312721, -0.3981175780296326)), 0.34, [55, 56, 57, 58, 59, 60, 61, 62]),
#      (Vector((0.5693859457969666, 0.49961066246032715, -0.352831494808197)), 0.34, [47, 48, 49, 50, 51, 52, 53, 54]),
#      (Vector((-0.779069721698761, 0.455067813396454, -0.24110554456710815)), 0.34, [63, 64, 65, 66, 67, 68, 69, 70, 101]),
#      (Vector((-0.7720233201980591, -0.09697314351797104, -0.3281529068946838)), 0.56, [71, 72, 73, 74, 75, 76, 77, 78]),
#      (Vector((-1.859164768802657e-07, 0.2071729600429535, -0.4783042669296265)), 0.60, [39, 40, 41, 42, 43, 44, 45, 46])],
#     # stem
#     [0, 1, 2, 3, 4, 5, 6, 7],
#     # verts
#     [(0.0, 0.99, 0.98), (-0.7, 0.7, 0.98), (-0.99, -0.0, 0.98), (-0.7, -0.7, 0.98), (0.0, -0.99, 0.98),
#      (0.7, -0.7, 0.98), (0.99, 0.0, 0.98), (0.7, 0.7, 0.98), (0.01, 1.07, 0.58), (-0.74, 0.76, 0.57),
#      (-1.06, 0.0, 0.58), (-0.75, -0.75, 0.58), (0.01, -1.07, 0.58), (0.76, -0.75, 0.58), (1.08, 0.0, 0.58),
#      (0.76, 0.76, 0.58), (0.01, 1.23, 0.08), (-0.82, 0.88, 0.09), (-1.21, 0.01, 0.08), (-0.86, -0.86, 0.09),
#      (0.01, -1.22, 0.09), (0.88, -0.86, 0.09), (1.23, 0.0, 0.09), (0.88, 0.87, 0.09), (0.1, 1.47, -0.3),
#      (-0.87, 1.07, -0.26), (-1.43, 0.05, -0.28), (-1.05, -1.0, -0.29), (0.01, -1.58, -0.29), (1.01, -1.04, -0.3),
#      (1.44, -0.02, -0.34), (1.02, 1.06, -0.29), (0.01, -0.62, -1.31), (-0.5, -0.77, -1.17), (-0.7, -1.14, -0.84),
#      (-0.5, -1.52, -0.5), (0.51, -1.52, -0.5), (0.72, -1.14, -0.84), (0.51, -0.77, -1.17), (0.01, 0.98, -1.09),
#      (-0.41, 0.81, -1.12), (-0.58, 0.41, -1.21), (-0.41, 0.01, -1.29), (0.01, -0.16, -1.33), (0.42, 0.01, -1.29),
#      (0.59, 0.41, -1.21), (0.42, 0.81, -1.12), (0.73, 1.52, -0.51), (0.51, 1.5, -0.72), (0.43, 1.3, -0.94),
#      (0.55, 1.03, -1.04), (0.79, 0.86, -0.96), (1.01, 0.88, -0.75), (1.09, 1.08, -0.53), (0.97, 1.35, -0.43),
#      (1.12, 0.28, -0.89), (0.9, 0.21, -1.05), (0.78, -0.03, -1.13), (0.83, -0.3, -1.08), (1.02, -0.44, -0.93),
#      (1.24, -0.37, -0.77), (1.36, -0.13, -0.69), (1.31, 0.14, -0.74), (-1.49, 0.49, -0.65), (-1.41, 0.74, -0.54),
#      (-1.25, 0.95, -0.62), (-1.09, 1.0, -0.84), (-1.03, 0.86, -1.08), (-1.11, 0.62, -1.19), (-1.27, 0.41, -1.11),
#      (-1.43, 0.36, -0.88), (-1.36, -0.85, -0.84), (-1.55, -0.51, -0.66), (-1.55, -0.1, -0.73), (-1.35, 0.16, -1.01),
#      (-1.08, 0.11, -1.33), (-0.89, -0.23, -1.51), (-0.9, -0.65, -1.44), (-1.09, -0.91, -1.16), (0.06, 1.52, -0.6),
#      (0.03, 1.37, -0.82), (1.22, 0.55, -0.74), (1.42, 0.42, -0.55), (1.0, 0.57, -0.9), (-0.8, 0.67, -1.11),
#      (-0.7, 0.94, -0.97), (-0.31, 1.18, -0.88), (-0.42, 1.31, -0.58), (-0.78, 1.14, -0.65), (-1.07, 1.01, -0.44),
#      (1.27, -0.5, -0.55), (1.08, -0.92, -0.53), (0.94, -0.96, -0.67), (0.83, -1.26, -0.5), (-0.97, -1.23, -0.5),
#      (-1.09, -1.06, -0.66), (-1.36, -0.73, -0.48), (-1.56, -0.12, -0.5), (-1.51, 0.28, -0.56), (-1.39, 0.53, -0.45),
#      (-1.51, 0.19, -0.75), (-1.46, 0.42, -0.77), (-0.91, -0.98, -1.01), (-0.72, -0.67, -1.28), (-0.68, -0.14, -1.37),
#      (-0.84, 0.26, -1.27), (-1.21, -0.94, -0.76), (-1.45, -0.6, -0.59), (-1.56, -0.12, -0.62), (-1.52, 0.22, -0.66),
#      (0.03, -0.95, -1.39), (-0.37, -1.06, -1.27), (-0.54, -1.33, -0.97), (-0.37, -1.6, -0.67), (0.03, -1.71, -0.55),
#      (0.43, -1.6, -0.67), (0.6, -1.33, -0.97), (0.43, -1.06, -1.27)],
#     # faces
#     [(7, 6, 14, 15), (5, 4, 12, 13), (3, 2, 10, 11), (1, 0, 8, 9), (0, 7, 15, 8), (6, 5, 13, 14), (4, 3, 11, 12),
#      (2, 1, 9, 10), (9, 8, 16, 17), (8, 15, 23,  16), (14,  13,  21, 22), (12, 11, 19, 20), (10, 9, 17, 18),
#      (15, 14, 22, 23), (13, 12, 20, 21), (11, 10, 18, 19), (16, 23, 31, 24), (22, 21, 29, 30), (20, 19, 27, 28),
#      (18, 17, 25, 26), (23, 22, 30, 31), (21, 20, 28, 29), (19, 18, 26, 27), (17, 16, 24, 25), (32, 43, 44, 38),
#      (33, 42, 43, 32), (103, 102, 78, 77), (104, 42, 33, 103), (105, 104, 76, 75), (45, 56, 57, 44), (57, 58, 38, 44),
#      (46, 50, 51, 45), (49, 50, 46, 39), (31, 54, 47, 24), (48, 49, 80, 79), (48, 79, 24, 47), (62, 55, 81, 82),
#      (53, 82, 81, 52), (61, 62, 82, 30), (38, 58, 59, 37), (56, 45, 51, 83), (81, 55, 56, 83), (53, 54, 31),
#      (52, 81, 83, 51), (30, 82, 53, 31), (40, 41, 84, 85), (85, 84, 68, 67), (86, 80, 49, 39), (39, 40, 85, 86),
#      (79, 80, 86, 87), (25, 24, 79, 87), (66, 88, 85, 67), (85, 88, 87, 86), (89, 25, 87, 88), (65, 89, 88, 66),
#      (60, 61, 30, 90), (29, 91, 90, 30), (92, 60, 90, 91), (60, 92, 37, 59), (36, 37, 92, 93), (29, 93, 92, 91),
#      (29, 28, 36, 93), (27, 94, 35, 28), (106, 71, 78, 102), (34, 35, 94, 95), (107, 72, 71, 106), (96, 95, 94, 27),
#      (26, 97, 96, 27), (108, 107, 96, 97), (70, 69, 75, 74), (73, 100, 70, 74), (97, 26, 99, 98), (98, 99, 64, 63),
#      (26, 25, 89, 99), (64, 99, 89, 65), (109, 108, 97, 98), (101, 109, 98, 63), (70, 100, 109, 101),
#      (100, 73, 108, 109), (73, 72, 107, 108), (96, 107, 106, 95), (95, 106, 102, 34), (41, 42, 104, 105),
#      (76, 104, 103, 77), (33, 34, 102, 103), (68, 105, 75, 69), (41, 105, 68, 84), (36, 115, 116, 37),
#      (114, 115, 36, 28), (35, 113, 114, 28), (34, 112, 113, 35), (111, 112, 34, 33), (32, 110, 111, 33),
#      (38, 117, 110, 32), (37, 116, 117, 38)],
#     # uvs
#     [[(0.52, 0.21), (0.37, 0.21), (0.37, 0.14), (0.52, 0.14)], [(0.23, 0.21), (0.11, 0.21), (0.11, 0.14), (0.23, 0.14)],
#      [(1.0, 0.21), (0.89, 0.21), (0.89, 0.14), (1.0, 0.14)], [(0.78, 0.21), (0.66, 0.21), (0.66, 0.14), (0.78, 0.14)],
#      [(0.66, 0.21), (0.52, 0.21), (0.52, 0.14), (0.66, 0.14)], [(0.37, 0.21), (0.23, 0.21), (0.23, 0.14), (0.37, 0.14)],
#      [(0.11, 0.21), (0.0, 0.21), (0.0, 0.14), (0.11, 0.14)], [(0.89, 0.21), (0.78, 0.21), (0.78, 0.14), (0.89, 0.14)],
#      [(0.78, 0.14), (0.66, 0.14), (0.66, 0.06), (0.78, 0.06)], [(0.66, 0.14), (0.52, 0.14), (0.52, 0.06), (0.66, 0.06)],
#      [(0.37, 0.14), (0.23, 0.14), (0.23, 0.06), (0.37, 0.06)], [(0.11, 0.14), (0.0, 0.14), (0.0, 0.06), (0.11, 0.06)],
#      [(0.89, 0.14), (0.78, 0.14), (0.78, 0.06), (0.89, 0.06)], [(0.52, 0.14), (0.37, 0.14), (0.37, 0.06), (0.52, 0.06)],
#      [(0.23, 0.14), (0.11, 0.14), (0.11, 0.06), (0.23, 0.06)], [(1.0, 0.14), (0.89, 0.14), (0.89, 0.06), (1.0, 0.06)],
#      [(0.66, 0.06), (0.52, 0.06), (0.52, 0.0), (0.66, 0.0)], [(0.37, 0.06), (0.23, 0.06), (0.23, 0.0), (0.37, 0.0)],
#      [(0.11, 0.06), (0.0, 0.06), (0.0, 0.0), (0.11, 0.0)], [(0.89, 0.06), (0.78, 0.06), (0.78, 0.0), (0.89, 0.0)],
#      [(0.52, 0.06), (0.37, 0.06), (0.37, 0.0), (0.52, 0.0)], [(0.23, 0.06), (0.11, 0.06), (0.11, 0.0), (0.23, 0.0)],
#      [(1.0, 0.06), (0.89, 0.06), (0.89, 0.0), (1.0, 0.0)], [(0.78, 0.06), (0.66, 0.06), (0.66, 0.0), (0.78, 0.0)],
#      [(0.49, 0.26), (0.55, 0.25), (0.58, 0.29), (0.49, 0.33)], [(0.2, 0.53), (0.12, 0.55), (0.12, 0.5), (0.16, 0.48)],
#      [(0.19, 0.56), (0.24, 0.56), (0.23, 0.59), (0.19, 0.58)], [(0.14, 0.57), (0.12, 0.55), (0.2, 0.53), (0.19, 0.56)],
#      [(0.28, 0.83), (0.22, 0.82), (0.22, 0.79), (0.27, 0.79)], [(0.63, 0.3), (0.62, 0.35), (0.59, 0.34), (0.58, 0.29)],
#      [(0.59, 0.34), (0.55, 0.36), (0.49, 0.33), (0.58, 0.29)], [(0.74, 0.53), (0.73, 0.56), (0.7, 0.54), (0.72, 0.48)],
#      [(0.63, 0.73), (0.66, 0.76), (0.65, 0.8), (0.59, 0.79)], [(0.61, 0.59), (0.64, 0.62), (0.63, 0.66), (0.57, 0.69)],
#      [(0.63, 0.7), (0.63, 0.73), (0.58, 0.74), (0.58, 0.71)], [(0.63, 0.7), (0.58, 0.71), (0.57, 0.69), (0.63, 0.66)],
#      [(0.61, 0.47), (0.64, 0.48), (0.63, 0.52), (0.6, 0.51)], [(0.64, 0.58), (0.6, 0.51), (0.63, 0.52), (0.66, 0.55)],
#      [(0.58, 0.45), (0.61, 0.47), (0.6, 0.51), (0.57, 0.49)], [(0.49, 0.33), (0.55, 0.36), (0.54, 0.39), (0.45, 0.38)],
#      [(0.68, 0.46), (0.72, 0.48), (0.7, 0.54), (0.67, 0.51)], [(0.63, 0.52), (0.64, 0.48), (0.68, 0.46), (0.67, 0.51)],
#      [(0.64, 0.58), (0.64, 0.62), (0.61, 0.59)], [(0.66, 0.55), (0.63, 0.52), (0.67, 0.51), (0.7, 0.54)],
#      [(0.57, 0.49), (0.6, 0.51), (0.64, 0.58), (0.61, 0.59)], [(0.55, 0.82), (0.53, 0.87), (0.5, 0.84), (0.51, 0.8)],
#      [(0.51, 0.8), (0.5, 0.84), (0.47, 0.85), (0.47, 0.82)], [(0.55, 0.76), (0.58, 0.74), (0.63, 0.73), (0.59, 0.79)],
#      [(0.59, 0.79), (0.55, 0.82), (0.51, 0.8), (0.55, 0.76)], [(0.58, 0.71), (0.58, 0.74), (0.55, 0.76), (0.53, 0.73)],
#      [(0.47, 0.72), (0.57, 0.69), (0.58, 0.71), (0.53, 0.73)], [(0.46, 0.79), (0.49, 0.76), (0.51, 0.8), (0.47, 0.82)],
#      [(0.51, 0.8), (0.49, 0.76), (0.53, 0.73), (0.55, 0.76)], [(0.45, 0.74), (0.47, 0.72), (0.53, 0.73), (0.49, 0.76)],
#      [(0.43, 0.76), (0.45, 0.74), (0.49, 0.76), (0.46, 0.79)], [(0.55, 0.42), (0.58, 0.45), (0.57, 0.49), (0.53, 0.44)],
#      [(0.47, 0.44), (0.48, 0.43), (0.53, 0.44), (0.57, 0.49)], [(0.48, 0.41), (0.55, 0.42), (0.53, 0.44), (0.48, 0.43)],
#      [(0.55, 0.42), (0.48, 0.41), (0.45, 0.38), (0.54, 0.39)], [(0.4, 0.42), (0.45, 0.38), (0.48, 0.41), (0.44, 0.42)],
#      [(0.47, 0.44), (0.44, 0.42), (0.48, 0.41), (0.48, 0.43)], [(0.47, 0.44), (0.36, 0.47), (0.4, 0.42), (0.44, 0.42)],
#      [(0.32, 0.58), (0.3, 0.56), (0.31, 0.5), (0.36, 0.47)], [(0.27, 0.6), (0.26, 0.61), (0.23, 0.59), (0.24, 0.56)],
#      [(0.26, 0.53), (0.31, 0.5), (0.3, 0.56), (0.28, 0.58)], [(0.29, 0.64), (0.29, 0.66), (0.26, 0.61), (0.27, 0.6)],
#      [(0.3, 0.62), (0.28, 0.58), (0.3, 0.56), (0.32, 0.58)], [(0.36, 0.68), (0.33, 0.69), (0.3, 0.62), (0.32, 0.58)],
#      [(0.32, 0.69), (0.29, 0.64), (0.3, 0.62), (0.33, 0.69)], [(0.34, 0.76), (0.32, 0.79), (0.27, 0.79), (0.31, 0.76)],
#      [(0.31, 0.7), (0.33, 0.73), (0.34, 0.76), (0.31, 0.76)], [(0.33, 0.69), (0.36, 0.68), (0.39, 0.73), (0.36, 0.72)],
#      [(0.36, 0.72), (0.39, 0.73), (0.4, 0.75), (0.37, 0.74)], [(0.36, 0.68), (0.47, 0.72), (0.45, 0.74), (0.39, 0.73)],
#      [(0.4, 0.75), (0.39, 0.73), (0.45, 0.74), (0.43, 0.76)], [(0.34, 0.72), (0.32, 0.69), (0.33, 0.69), (0.36, 0.72)],
#      [(0.35, 0.75), (0.34, 0.72), (0.36, 0.72), (0.37, 0.74)], [(0.34, 0.76), (0.33, 0.73), (0.34, 0.72), (0.35, 0.75)],
#      [(0.33, 0.73), (0.31, 0.7), (0.32, 0.69), (0.34, 0.72)], [(0.31, 0.7), (0.29, 0.66), (0.29, 0.64), (0.32, 0.69)],
#      [(0.3, 0.62), (0.29, 0.64), (0.27, 0.6), (0.28, 0.58)], [(0.28, 0.58), (0.27, 0.6), (0.24, 0.56), (0.26, 0.53)],
#      [(0.28, 0.87), (0.23, 0.86), (0.22, 0.82), (0.28, 0.83)], [(0.15, 0.59), (0.14, 0.57), (0.19, 0.56), (0.19, 0.58)],
#      [(0.2, 0.53), (0.26, 0.53), (0.24, 0.56), (0.19, 0.56)], [(0.33, 0.82), (0.28, 0.83), (0.27, 0.79), (0.32, 0.79)],
#      [(0.28, 0.87), (0.28, 0.83), (0.33, 0.82), (0.32, 0.86)], [(0.4, 0.42), (0.38, 0.41), (0.42, 0.37), (0.45, 0.38)],
#      [(0.34, 0.44), (0.38, 0.41), (0.4, 0.42), (0.36, 0.47)], [(0.31, 0.5), (0.3, 0.48), (0.34, 0.44), (0.36, 0.47)],
#      [(0.26, 0.53), (0.26, 0.5), (0.3, 0.48), (0.31, 0.5)], [(0.21, 0.5), (0.26, 0.5), (0.26, 0.53), (0.2, 0.53)],
#      [(0.16, 0.48), (0.19, 0.47), (0.21, 0.5), (0.2, 0.53)], [(0.49, 0.33), (0.45, 0.32), (0.45, 0.27), (0.49, 0.26)],
#      [(0.45, 0.38), (0.42, 0.37), (0.45, 0.32), (0.49, 0.33)]])


def joindre(verts, faces, v1_i, v2_i):
    """ Takes two sets of eight vertices, a list of vertices, a list of faces, and adds new faces as the bridge edge loops operator would do.

    Args:
        verts - (list of (Vector, Vector, Vector)) The list of vertices
        faces - (list of (int, int, int, int)) The list of faces
        v1_i - (int, int, int, int, int, int, int, int) The indexes of the first group of vertices
        v2_i - (int, int, int, int, int, int, int, int) The indexes of the second group of vertices
    """
    v1 = verts[v1_i[0]]
    n = len(v2_i)
    d = float('inf')
    decalage = 0
    for i in range(n):
        d1 = (verts[v2_i[i]] - v1).length
        if d1 < d:
            d = d1
            decalage = i
    v2 = verts[v1_i[1]]
    k = 1
    if (verts[v2_i[(decalage + 1) % n]] - v2).length > (verts[v2_i[(decalage - 1) % n]] - v2).length:
        k = -1
    for i in range(n-1, -1, -1):
        faces.append([v2_i[(decalage + i * k) % n], v1_i[i], v1_i[(i + 1) % n], v2_i[(decalage + (i + 1) * k) % n]])


def join(verts, faces, indexes, object_verts, object_faces, scale, i1, i2, entree, directions, branch_length,
         uv_list, jonc_uv, random_angle, branch_rotation, height, real_radius):
    """ The goal is to add a split to the tree. To do that, there is the list of existing vertices, the list of existing faces, the list of vertices to add and the list of faces to add.
        To know where to add the split, the indexes of eight vertices is given.

    Args:
        verts - (list of (Vector, Vector, Vector)) The existing vertices
        faces - (list of (int, int, int, int)) The existing faces
        indexes - ((int, int, int, int, int, int, int, int)) the indexes of the end of the branch on which the split will be added
        object_verts - (list of (Vector, Vector, Vector)) The vertices to add
        object_faces - (list of (int, int, int, int)) The faces to add
        scale - (float) the scale of which the split must be
        i1 - ((int, int, int, int, int, int, int, int))The indexes of the first end of the split
        i2 - ((int, int, int, int, int, int, int, int)) The indexes of the second end of the split
        entree - ((int, int, int, int, int, int, int, int)) the indexes of the base of the split
        directions - (Vector) The direction the split will be pointing at
        branch_length - (float) the distance between the branch end and the split base
        s_index - (int) The index of the last vertex that is part of a seam
        seams - (list of (int, int)) The seams of the tree
        jonc_seams - (list of (int, int)) The seams of the split
        random_angle - (float) The amount of possible deviation between directions and the actual split direction
        branch_rotation - (float) The rotation of the split around directions

    Returns:
        i1 - ((int, int, int, int, int, int, int, int)) The indexes of the first end of the split
        i2 - ((int, int, int, int, int, int, int, int)) The indexes of the second end of the split
        d1 - (Vector) The direction of the first end of the split
        d2 - (Vector) The direction of the second end of the split
        r1 - (float) The radius of the first end of the split
        r2 - (float) The radius of the second end of the split
        i1[0] - (int) The index of the last vertex that is part of a seam on the first end of the split
        i2[0] - (int) The index of the last vertex that is part of a seam on the second end of the split
    """
    random1 = random_angle * (random() - 0.5)
    random2 = random_angle * (random() - 0.5)
    random3 = random_angle * (random() - 0.5)

    rand_x = Matrix.Rotation(random1, 4, 'X')
    rand_y = Matrix.Rotation(random2, 4, 'Y')
    rand_z = Matrix.Rotation(random3, 4, 'Z')

    directions = (((directions * rand_x) * rand_y) * rand_z)
    barycentre = Vector((0, 0, 0))
    for i in indexes:
        barycentre += verts[i]
    barycentre /= len(indexes)

    directions.normalize()

    uv_scale = 3*branch_length/real_radius
    m = Matrix([(1, 0), (0, uv_scale)])

    barycentre += directions * branch_length
    r1 = (object_verts[i1[0]] - object_verts[i1[4]]).length / 2
    r2 = (object_verts[i2[0]] - object_verts[i2[4]]).length / 2
    v = rot_scale(object_verts, scale, directions, radians(branch_rotation))
    d2 = v[-1]
    d1 = v[-2]

    n = len(verts)
    to_be_painted = []
    nentree = [n + i for i in entree]
    to_be_painted += nentree
    to_be_painted += indexes
    uv_list += [[Vector(uv)+Vector((0, height)) for uv in u] for u in jonc_uv]
    faces += [add_tuple(f, n) for f in object_faces]
    verts += [barycentre + i for i in v]
    joindre(verts, faces, indexes, nentree)
    uv_list += [[m*Vector(uv) for uv in u] for u in branch.uv]

    i1 = [n + i for i in i1]
    i2 = [n + i for i in i2]
            
    return i1, i2, d1, d2, r1, r2, to_be_painted  # no need to return i1[0] and i2[0]...just do that outside of the func


def join_branch(verts, faces, indexes, scale, branch_length, branch_verts, direction, rand, uv_list, height, real_radius):
    """ The goal is to add a Module to the tree. To do that, there is the list of existing vertices, the list of existing faces, the list of vertices to add and the list of faces to add.
        To know where to add the Module, the indexes of eight vertices is given.

    Args:
        verts - (list of (Vector, Vector, Vector)) The existing vertices
        faces - (list of (int, int, int, int)) The existing faces
        indexes - ((int, int, int, int, int, int, int, int)) the indexes of the end of the branch on which the Module will be added
        scale - (float) the scale of which the Module must be
        branch_length - (float) the distance between the branch end and the Module base
        branch_verts - (list of (Vector, Vector, Vector)) The vertices to add
        direction - (Vector) The direction the Module will be pointing at
        rand - (float) The amount of possible deviation between direction and the actual Module direction
        s_index - (int) The index of the last vertex that is part of a seam
        seams - (list of (int, int)) The seams of the tree

    Returns:
        nentree - ((int, int, int, int, int, int, int, int)) The indexes of the end of the Module
        direction - (Vector) The direction of the end of the Module
        ns_index - (int) The index of the last vertex that is part of a seam on the end of the Module
    """
    barycentre = Vector((0, 0, 0))
    random1 = rand * (random() - 0.5)
    random2 = rand * (random() - 0.5)
    random3 = rand * (random() - 0.5)
    for i in indexes:
        barycentre += verts[i]
    barycentre /= len(indexes)

    direction.normalized()
    rand_x = Matrix.Rotation(random1, 4, 'X')
    rand_y = Matrix.Rotation(random2, 4, 'Y')
    rand_z = Matrix.Rotation(random3, 4, 'Z')

    direction = (((direction * rand_x) * rand_y) * rand_z)
    barycentre += direction * branch_length
    n = len(verts)
    v = rot_scale(branch_verts, scale, direction, 0)
    nentree = [n + i for i in range(8)]
    verts += [ve + barycentre for ve in v]
    joindre(verts, faces, indexes, nentree)

    uv_scale = 3*branch_length / real_radius
    m = Matrix([(1, 0), (0, uv_scale)])
    uv_list += [[m*Vector(uv) + Vector((0, height)) for uv in u] for u in branch.uv]


    return nentree, direction


def gravity(direction, gravity_strength):
    """ Applies a down translation to a vector to simulate gravity

    Args:
        direction - (Vector) The Vector to apply gravity to
        gravity_strength - (float)

    Returns:
        (Vector) The vector direction translated downward
    """
    v = Vector((0, 0, -1))
    norm = direction.length
    factor = (direction.cross(v)).length / norm / 100 * gravity_strength
    return direction + v * factor


def add_tuple(t, x):
    """Adds a value x to each component of the tuple

    Args:
        t - (tuple)
        x - (int,float)

    Returns:
         tuple in the form (x + a, x + b, x + c,...) where t is in the form (a, b, c,...)"""
    return tuple([x + i for i in t])


def rot_scale(v_co, scale, directions, rot_z):
    """ Rotates and scales a set of vectors

    Args:
        v_co - (list of (float, float, float))  The coordinates of the vectors
        scale - (float) The scalar by which each vector is multiplied
        directions - (tuple) A vector that would be collinear with a former (0,0,1) vector after the rotation
        rot_z - (float) The rotation of the set of vector around directions

    Returns:
        A set of coordinates representing all vectors of v_co after rotation and scaling
    """

    (x, y, z) = directions
    directions = Vector((-x, -y, z))
    q = Vector((0, 0, 1)).rotation_difference(directions)
    mat_rot = q.to_matrix()
    mat_rot.resize_4x4()
    mc = Matrix.Rotation(rot_z, 4, 'Z')
    v_co = [((v * scale) * mc) * mat_rot for v in v_co]
    return v_co


def fix_normals(inside):
    bpy.ops.object.mode_set(mode='EDIT')
    bpy.ops.mesh.select_all(action='SELECT')
    bpy.ops.mesh.normals_make_consistent(inside=inside)
    bpy.ops.mesh.select_all(action='DESELECT')
    bpy.ops.object.mode_set(mode='OBJECT')


def sign(a):
    """Returns the side of the number line a is on.

    +-------------------------------------------------+
    | Number line: ...-3...-2...-1...0...1...2...3... |
    | Returns:        -1   -1   -1   0   1   1   1    |
    +-------------------------------------------------+
    if a is less than 0, returns -1.
    if a is equal to 0, returns 0.
    if a is greater than 0, returns 1.
    """
    return 1 if a > 0 else -1 if a < 0 else 0


def add_leaf(position, direction, scale, leaf, leaf_weight):
    scene = bpy.context.scene
    direction = Vector((0, 1, 0)) * leaf_weight + (1-leaf_weight) * direction
    direction.normalize()

    for select_ob in bpy.context.selected_objects:
        select_ob.select = False
    leaf_object = scene.objects[leaf]

    new_leaf = leaf_object.copy()
    new_leaf.data = leaf_object.data.copy()
    bpy.context.scene.objects.link(new_leaf)
    leaf_object = new_leaf
    leaf_object.select = True
    bpy.context.scene.objects.active = leaf_object

    dim = max(bpy.context.object.dimensions)
    bpy.ops.transform.resize(value=(scale/dim, scale/dim, scale/dim))
    leaf_object.location = position
    bpy.ops.transform.rotate(value=pi/2, axis=(1, 0, 0))
    y = Vector((direction.x, 0, direction.z))
    x = Vector((0, direction.y, direction.z))
    angle__y = 0 if y == Vector((0, 0, 0)) else Vector((0, 0, 1)).angle(y)*sign(direction.x)
    angle__x = 0 if x == Vector((0, 0, 0)) else Vector((0, 0, 1)).angle(x) * sign(-direction.y)
    if abs(angle__y) > pi/2:
        angle__y /= 3
    if angle__x > 0:
        angle__x /= 4
    bpy.ops.transform.rotate(value=angle__y, axis=(0, 1, 0))
    bpy.ops.transform.rotate(value=angle__x, axis=(1, 0, 0))


def rehash_set(s, p_dist):
    new_set = list()
    new_set.append(s[0])
    i = 1
    while i < len(s):
        n_dist = (s[i] - new_set[-1]).length
        if n_dist >= p_dist:
            new_set.append(new_set[-1] + p_dist/n_dist * (s[i] - new_set[-1]))
        else:
            i += 1
    return new_set


def smooth_stroke(iterations, smooth, points):
    
    for i in range(iterations):
        new_points = list()
        new_points.append(points[0])
        for j in range(1, len(points)-1):
            new_points.append(smooth / 2 * (points[j-1] + points[j+1]) + (1 - smooth) * points[j])
        new_points.append(points[-1])
        points = new_points
    return points


def resolution(coord):
    scene = bpy.context.scene
    mtree_props = scene.mtree_props
    res = mtree_props.pruning_resolution

    def f(scalar): return int(scalar/res)*res

    (x, y, z) = coord
    return f(x), f(y), f(z)


def create_tree(position, is_twig=False):
    """Creates a tree

    Details:
        There is a list of vertices, a list of faces and a list of seams.
        There is a list of all current end of the tree. At each iteration all those ends can evolve in three different ways:
            -The end can continue to grow as a branch, with a new end
            -The end can be spliced in two branches, with a new end each
            -The end can break
        Depending on this choice, vertices and faces of a Module, Split or end cap will be added to the vertices and faces list.
        This process is executed for both roots and branches generation.
        After this, the tree object itself is created, the vertices, faces and seams are applied.
        Once the object is created, it can be unwrapped, a material is assigned or created, and an armature is created.


    Args:
        position - (Vector) Position to generate tree at
        is_twig - (Bool) Is the tree a twig
    """
    scene = bpy.context.scene
    mtree_props = scene.mtree_props

    clock = Clock("create_tree")

    twig_leafs = []
    paint_indexes = []

    leafs_weight_indexes = []

    # deselecting all objects
    for select_ob in bpy.context.selected_objects:
        select_ob.select = False

    if bpy.data.objects.get(mtree_props.obstacle) is not None:
        obs = scene.objects[mtree_props.obstacle]
        obs.select = True
        scene.objects.active = obs
        bpy.ops.object.duplicate()
        obs = scene.objects.active
        bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)
        if mtree_props.obstacle_flip_normals:
            bpy.ops.object.mode_set(mode='EDIT')
            bpy.ops.mesh.flip_normals()
            bpy.ops.object.mode_set(mode='OBJECT')

        obs.select = False
        # obs = scene.objects[mtree_props.obstacle]
        scene.update()


    # the list of bones is a list of...
    # [(string : parent name, string : bone name, Vector : tail position, Vector : head position), ...]
    bones = []
    big_j = S1


    entree = [i for i in big_j.entree]

    last_bone = (1, Vector((0, 0, 1)))


    verts = [Vector(v) * mtree_props.radius for v in root.verts]
    faces = [f for f in root.faces]
    extr = [i for i in root.sortie[1]]
    uv_list = [u for u in root.uv]

    if mtree_props.pruning:
        pruning_tree = SearchTree(resolution(position), mtree_props.radius)

    height = root.uv_height
    extremites = [(extr, mtree_props.radius, Vector((0, 0, 1)), last_bone, mtree_props.preserve_trunk, 0, height)]
    curr_grease_point = 0
    using_grease = False
    vcol_rad = [mtree_props.radius]*len(verts)
    gp = bpy.context.scene.grease_pencil
    grease_points = []
    save_trunk_length = mtree_props.trunk_length
    save_trunk_space = mtree_props.trunk_space
    if mtree_props.use_grease_pencil and gp is not None and gp.layers.active is not None and gp.layers.active.active_frame is not None and len(gp.layers.active.active_frame.strokes) > 0 and len(gp.layers.active.active_frame.strokes[0].points) > 2:
        grease_points = rehash_set([i.co for i in gp.layers.active.active_frame.strokes[0].points], mtree_props.stroke_step_size)
        grease_points = smooth_stroke(5, mtree_props.smooth_stroke, grease_points)
        mtree_props.trunk_length = len(grease_points) - 2
        print(len(grease_points))
        print(grease_points)
        using_grease = True

    def add_branch_layer(extremities, iteration, branch_type="Branch",  faces=faces, verts=verts, uv_list=uv_list, paint_indexes=paint_indexes, vcol_rad=vcol_rad):
        nextremites = []
        nonlocal curr_grease_point

        for E in extremities:
            indexes, radius, direction, lb, is_trunk, curr_rotation, curr_height = E
            real_radius = (verts[indexes[0]] - verts[indexes[4]]).length
            uv_scale = 3 * branch.uv_height / real_radius
            new_rotation = (curr_rotation + mtree_props.branch_rotate + 2 *
                            (0.5 - random()) * mtree_props.branch_random_rotate) % 360 \
                if branch_type == "Branch" else (random()-.5)*20

            if iteration > mtree_props.preserve_end and branch_type == "Branch":
                is_trunk = False
            pos = Vector((0, 0, 0))

            for k in indexes:
                pos += verts[k]
            pos /= len(indexes)
            direction.normalize()

            if is_twig and iteration > 2:
                twig_leafs.append((pos, direction))

            world_pos = position + pos
            end = world_pos + direction * 10

            if mtree_props.roots_stay_under_ground and branch_type == "Roots":
                dist_to_ground = max(-pos.z + mtree_props.roots_ground_height, .01)
                if dist_to_ground < 3:
                    direction += Vector((0, 0, -1))*.1/sqrt(dist_to_ground)

                    direction.normalize()


            if mtree_props.use_force_field and branch_type == "Branch":
                point_forces = [ob for ob in bpy.data.objects if ob.type == 'EMPTY' and ob.field.type == 'FORCE']
                wind_forces = [ob for ob in bpy.data.objects if ob.type == 'EMPTY' and ob.field.type == 'WIND']
                factor = mtree_props.fields_radius_factor
                point_net_force = Vector((0, 0, 0))
                for ob in point_forces:
                    force_power = max(1, ob.field.falloff_power)
                    sgn = 1 if ob.field.strength == 0 else ob.field.strength / abs(ob.field.strength)
                    force_direction = pos - ob.location
                    dist = force_direction.length
                    force_direction.normalize()

                    # please comment
                    point_net_force += min(
                        (exp(-3 * real_radius) * factor + (1 - factor)) * abs(ob.field.strength) / (dist ** force_power),
                        mtree_props.fields_strength_limit
                    ) * sgn * force_direction

                wind_net_force = Vector((0, 0, 0))
                for ob in wind_forces:
                    force_direction = Vector((0, 0, 1))
                    force_direction.rotate(ob.rotation_euler)
                    wind_net_force += min(ob.field.strength * (exp(-3 * real_radius) * factor + (1 - factor)),
                                          mtree_props.fields_strength_limit) * force_direction

                # this desperately needs a good comment or two explaining :-)
                direction += mtree_props.fields_point_strength / 10 * point_net_force + mtree_props.fields_wind_strength / 30 * wind_net_force
            break_chance = mtree_props.break_chance
            if bpy.data.objects.get(mtree_props.obstacle) is not None and branch_type == "Branch":
                scene.update()
                result, hit_pos, face_normal, face_index = obs.ray_cast(world_pos, end)
                if result:
                    if mtree_props.obstacle_kill:
                        break_chance += 1.5 / (hit_pos - world_pos).length ** 2
                    else:
                        force = abs(min(direction.dot(face_normal), 0)) * mtree_props.obstacle_strength / (
                        (hit_pos - world_pos).length + 1) * 2
                        direction += face_normal * force

            if mtree_props.pruning:
                pruning_tree.add(resolution(pos), (2 + real_radius) / 3)

            split_probability = mtree_props.trunk_split_proba if is_trunk else mtree_props.split_proba
            if branch_type == "Roots":
                split_probability = mtree_props.roots_split_proba
            if mtree_props.pruning and iteration > mtree_props.trunk_length and not is_trunk and branch_type == "Branch":
                split_probability /= max(1,
                                         mtree_props.pruning_intensity / mtree_props.pruning_resolution * pruning_tree.get_value(
                                             resolution(pos)))
                break_chance += mtree_props.pruning_intensity / mtree_props.pruning_resolution * pruning_tree.get_value(
                    resolution(pos)) / 100

            if is_trunk and mtree_props.dont_break_trunk:
                break_chance = 0

            if iteration <= mtree_props.trunk_length and branch_type == "Branch":
                branch_verts = [v for v in branch.verts]
                vcol_rad += [real_radius]*8
                if not using_grease or curr_grease_point >= len(grease_points) - 2:
                    ni, direction = join_branch(verts, faces, indexes, radius, mtree_props.trunk_space, branch_verts,
                                                direction,
                                                mtree_props.trunk_variation, uv_list, curr_height, real_radius)
                    sortie = pos + direction * mtree_props.trunk_space
                    new_height = mtree_props.trunk_space

                else:
                    gp1 = grease_points[curr_grease_point + 1]
                    gp2 = grease_points[curr_grease_point]
                    grease_dir = gp1 - gp2
                    grease_length = grease_dir.length
                    grease_dir.normalize()
                    ni, direction = join_branch(verts, faces, indexes, radius, grease_length,
                                                branch_verts,
                                                grease_dir,
                                                0, uv_list, curr_height, real_radius)
                    sortie = pos + grease_dir * grease_length

                    new_height = grease_length
                    curr_grease_point += 1

                if iteration <= mtree_props.bones_iterations:
                    bones.append((lb[0], len(bones) + 2, lb[1], sortie))

                nb = (len(bones) + 1, sortie)
                new_height = new_height * uv_scale
                nextremites.append((ni, radius * 0.98, direction, nb, is_trunk, curr_rotation, curr_height + new_height))

            elif (iteration == mtree_props.iteration + mtree_props.trunk_length - 1 and branch_type == "Branch") \
                    or random() < break_chance * exp(-real_radius) \
                    or real_radius < mtree_props.branch_min_radius\
                    or (iteration == mtree_props.roots_iteration - 1 and branch_type == "Roots"):

                end_verts = [Vector(v) for v in end_cap.verts]
                end_faces = [f for f in end_cap.faces]
                length = mtree_props.trunk_space if is_trunk else mtree_props.branch_length
                if branch_type == "Roots":
                    length = mtree_props.roots_length * sqrt(real_radius)

                n = len(verts)

                join_branch(verts, faces, indexes, radius, length, end_verts, direction,
                            mtree_props.trunk_variation, uv_list, 0, real_radius)

                faces += [add_tuple(f, n) for f in end_faces]
                uv_list += [u for u in end_cap.uv]
                vcol_rad += [real_radius]*len(end_verts)
                if real_radius < mtree_props.radius / 4 and branch_type == "Branch":
                    leafs_weight_indexes.append(len(verts) - 1)

            elif iteration < mtree_props.iteration + mtree_props.trunk_length - 1 \
                    and iteration == mtree_props.trunk_length + 1 \
                    and branch_type == "Branch"\
                    or random() < split_probability:

                variation = mtree_props.trunk_variation if is_trunk else mtree_props.randomangle


                rand_j = randint(1, 5)
                rand_t = randint(0, 4)
                big_j = Joncts[rand_j] if (not is_trunk) else Trunks[rand_t]
                i1 = [iteration for iteration in big_j.sortie[0]]
                i2 = [iteration for iteration in big_j.sortie[1]]
                jonct_uv = [u for u in big_j.uv]

                inter_fact = mtree_props.trunk_split_angle if is_trunk else mtree_props.split_angle
                jonct_verts = interpolate(big_j.verts1, big_j.verts2, inter_fact)
                length = mtree_props.trunk_space if is_trunk else mtree_props.branch_length
                if branch_type == "Roots":
                    length = mtree_props.roots_length*sqrt(real_radius)
                    variation = .25
                ni1, ni2, dir1, dir2, r1, r2, to_be_painted = join(verts, faces, indexes, jonct_verts, big_j.faces,
                                                                   radius * (1 + mtree_props.radius_dec) / 2, i1, i2,
                                                                   entree,
                                                                   direction, length, uv_list, jonct_uv,
                                                                   variation, new_rotation, curr_height, real_radius)
                sortie1 = (verts[ni1[0]] + verts[ni1[4]]) / 2
                sortie2 = (verts[ni2[0]] + verts[ni2[4]]) / 2
                paint_indexes += to_be_painted
                nb = len(bones)
                vcol_rad += [real_radius]*len(jonct_verts)
                if iteration <= mtree_props.bones_iterations and branch_type == "Branch":
                    bones.append((lb[0], nb + 2, lb[1], sortie1))
                    bones.append((lb[0], nb + 3, lb[1], sortie2))

                nb1 = (nb + 2, sortie1)
                nb2 = (nb + 3, sortie2)
                if mtree_props.gravity_start <= iteration <= mtree_props.gravity_end and branch_type == "Branch":
                    dir1 = gravity(dir1, mtree_props.gravity_strength)
                    dir2 = gravity(dir2, mtree_props.gravity_strength)

                new_height = curr_height + length * uv_scale + big_j.uv_height

                nextremites.append(
                    (ni1, radius * mtree_props.radius_dec * r1, dir1, nb1, is_trunk, new_rotation, new_height))
                nextremites.append((ni2, radius * mtree_props.radius_dec * r2, dir2, nb2, False, new_rotation, new_height))

            else:
                branch_verts = [v for v in branch.verts]

                variation = mtree_props.trunk_variation if is_trunk else mtree_props.randomangle
                length = mtree_props.trunk_space if is_trunk else mtree_props.branch_length
                if branch_type == "Roots":
                    length = mtree_props.roots_length * sqrt(real_radius)
                ni, direction = join_branch(verts, faces, indexes, radius, length, branch_verts, direction,
                                            variation, uv_list, curr_height, real_radius)

                sortie = pos + direction * mtree_props.branch_length
                vcol_rad += [real_radius]*8

                if iteration <= mtree_props.bones_iterations and branch_type == "Branch":
                    bones.append((lb[0], len(bones) + 2, lb[1], sortie))

                nb = (len(bones) + 1, sortie)
                if mtree_props.gravity_start <= iteration <= mtree_props.gravity_end and branch_type == "Branch":
                    direction = gravity(direction, mtree_props.gravity_strength)
                new_height = length * uv_scale
                nextremites.append(
                    (ni, radius * mtree_props.radius_dec, direction, nb, is_trunk, curr_rotation, curr_height + new_height))
        return nextremites

    # branches generation
    print("Generating Branches...")
    for i in range(mtree_props.iteration + mtree_props.trunk_length):
        extremites = add_branch_layer(extremites, i)

    #Roots generation
    if mtree_props.create_roots:
        print("generating Roots")
        n = len(verts)
        verts += [Vector(v) * mtree_props.radius for v in R1.verts]
        faces += [add_tuple(f, n) for f in R1.faces]
        uv_list += R1.uv
        extremites = []
        for r in R1.roots:
            extr = [n+i for i in r[1]]
            rad = (verts[extr[0]] - verts[extr[4]]).length / 2
            direction = Vector(r[0])
            extremites.append((extr, rad, direction, None, False, 0, 0))

        for i in range(mtree_props.roots_iteration):
            extremites = add_branch_layer(extremites, i, "Roots")

    # mesh and object creation
    mtree_props.trunk_length = save_trunk_length
    mtree_props.trunk_space = save_trunk_space
    print("Building Object...")

    mesh = bpy.data.meshes.new("tree")
    bm = bmesh.new()
    bm.from_mesh(mesh)
    for v in verts:
        bm.verts.new(v)
    bm.verts.ensure_lookup_table()
    for f in faces:
        bm.faces.new([bm.verts[i] for i in f])


    bm.to_mesh(mesh)
    bm.free()
    obj = bpy.data.objects.new("tree", mesh)
    obj.location = position if not using_grease else grease_points[0] - Vector((0, 0, 1))
    scene.objects.link(obj)
    scene.objects.active = obj
    obj.select = True
    bpy.ops.object.shade_smooth()
    bpy.ops.object.mode_set(mode='EDIT')

    obj.select = False

    if bpy.data.objects.get(mtree_props.obstacle) is not None:
        scene.objects.unlink(obs)
        bpy.data.objects.remove(obs)

    vgroups = obj.vertex_groups

    # add vertex group for the leaves particle system
    obj.vertex_groups.new("leaf")
    vgroups.active_index = vgroups["leaf"].index
    bpy.ops.object.mode_set(mode='EDIT')
    bpy.ops.mesh.select_all(action='DESELECT')
    bpy.ops.object.mode_set(mode='OBJECT')
    for i in leafs_weight_indexes:
        mesh.vertices[i].select = True

    bpy.ops.object.mode_set(mode='EDIT')
    for i in range(mtree_props.leafs_iteration_length+5):
        bpy.ops.mesh.select_more()

    bpy.ops.object.vertex_group_assign()
    bpy.ops.mesh.select_all(action='SELECT')
    bpy.ops.object.mode_set(mode='WEIGHT_PAINT')
    bpy.context.object.data.use_paint_mask_vertex = True
    bpy.ops.object.vertex_group_smooth(factor=1, repeat=3)
    bpy.ops.object.mode_set(mode='EDIT')
    bpy.ops.mesh.remove_doubles()
    bpy.ops.mesh.select_all(action='TOGGLE')
    bpy.ops.object.mode_set(mode='OBJECT')


    # add vertex group for the wind animations
    obj.vertex_groups.new("wind_anim")

    # fix normals, then make sure they are fixed :)
    print("Setting Normals...")
    fix_normals(inside=False)
    if obj.data.polygons[0].normal.x < 0:
        fix_normals(inside=True)

    # vertex paint
    paint = [False]*len(verts)
    for i in paint_indexes:
        paint[i] = True
    clock.add_sub_job("vertex_paint")
    bpy.ops.object.mode_set(mode='OBJECT')
    color = (0,0,0)
    vcol_layer = mesh.vertex_colors.new()
    vcol_rad_layer = mesh.vertex_colors.new()
    vcol_layer.name = "seams"
    vcol_rad_layer.name = "radius"

    for loop_index, loop in enumerate(mesh.loops):
        loop_vert_index = loop.vertex_index
        if paint[loop_vert_index]:
            vcol_layer.data[loop_index].color = color
        value = vcol_rad[loop_vert_index]/mtree_props.radius
        vcol_rad_layer.data[loop_index].color = Vector((value,value,value))



    clock.stop("vertex_paint")


    # particle setup
    if mtree_props.particle:
        print("Configuring Particle System...")
        create_system(obj, mtree_props.number, mtree_props.display, vgroups["leaf"], mtree_props.twig_particle, mtree_props.particle_size)

    # uv unwrapping
    if mtree_props.uv:
        print("Unwrapping...")
        clock.add_sub_job("uv")
        bm = bmesh.new()  # create an empty BMesh
        bm.from_mesh(mesh)
        bm.loops.layers.uv.new()
        uv_layer = bm.loops.layers.uv.active
        for face in bm.faces:
            it = 0
            for loop in face.loops:
                loop[uv_layer].uv = uv_list[face.index][it]
                it += 1
        bm.to_mesh(mesh)
        bm.free()
        clock.stop("uv")

    # material creation
    print("Setting Materials...")
    if mtree_props.mat:
        obj.active_material = build_bark_material("bark")

    elif bpy.data.materials.get(mtree_props.bark_material) is not None:
        obj.active_material = bpy.data.materials.get(mtree_props.bark_material)

    # armature creation
    if mtree_props.create_armature:
        print("Building Armature...")
        clock.add_sub_job("armature")
        bpy.ops.object.add(type='ARMATURE', enter_editmode=True, location=Vector((0, 0, 0)))
        arm = bpy.context.object
        arm.show_x_ray = True
        amt = arm.data
        arm.data.draw_type = 'STICK'
        bone = amt.edit_bones.new('1')
        bone.head = Vector((0, 0, 0))
        bone.tail = Vector((0, 0, 1))

        for (pname, name, h, t) in bones:
            bone = amt.edit_bones.new(str(name))
            bone.parent = arm.data.edit_bones[str(pname)]
            bone.use_connect = True
            bone.head = h
            bone.tail = t

        bpy.ops.object.editmode_toggle()
        bpy.ops.object.select_all(action='DESELECT')
        obj.select = True
        arm.select = True
        scene.objects.active = arm
        bpy.ops.object.parent_set(type='ARMATURE_AUTO')
        bpy.ops.object.select_all(action='DESELECT')
        clock.stop("armature")

    obj.select = True
    scene.objects.active = obj
    obj["is_tree"] = True
    obj["has_armature"] = True if mtree_props.create_armature else False

    clock.stop("create_tree")
    print("\nDeveloper Info:")
    clock.display()
    if is_twig:
        return twig_leafs
